#keywords: this(for rec),true,false
#types: [A-Z][a-zA-Z]*
#ids: [a-z]*
#chaining: ; (can be used for return,index,data-struct creating and so on
#need dot operator for accessing 
#no braces at all, these are reserved by the injecting language.


#Tokens - Make sure shorter tokens are not prefix of longer when shorter comes first
token   "lapp"  ,"rapp"     ,"rarr"
    as  "\\|>"    ,"<\\|"   ,"->"
token   "sleft" ,"sright"
    as  "<<"    ,">>"
token   "lbracketm" ,"rbracketm"
    as  "\\[\\|"    ,"\\|\\]"
token   "lpar"   ,"lbracket" ,"rpar"   ,"rbracket"
    as  "("      ,"\\["      ,")"      ,"\\]"
token   "plus"  ,"minus"    ,"power"    ,"divide"   ,"modulo"   ,"times"
    as  "\\+"   ,"-"        ,"\\*\\*"   ,"/"      ,"%"        ,"\\*"
token   "eq"    ,"not-eq"   ,"geq"      ,"leq"  ,"gt"   ,"lt"
    as  "=="    ,"!="       ,">="       ,"<="   ,">"    ,"<"
token   "and"   ,"or"       ,"imp"      ,"biimp"    ,"not"
    as  "\\&\\&","\\|\\|"   ,"=>"       ,"<=>"      ,"!"
token   "comma" ,"dotdot"   ,"dot"  ,"colon"    ,"mid"  ,"uscore"    ,"qmark"    ,"hash"
    as  ","     ,".."       ,"."    ,":"        ,"\\|"  ,"_"         ,"\\?"      ,"#"
token   "bslash","up"   ,"amp"  ,"tilde"    ,"scolon"    ,"dcolon"
    as  "\\\\"  ,"\\^"  ,"\\&"  ,"~"        ,";"         ,"::"
token   "let"   ,"type"     ,"assign"   ,"match"    ,"with" ,"block"    ,"of"
    as  "let"   ,"type"     ,"="        ,"match"    ,"with" ,"block"    ,"of"
#caps
token -cap  "hex"               ,"binary"   ,"float"        ,"int"            ,"string"
    as      "0x[0-9a-fA-F]+"    ,"0b[01]+"  ,"[0.9]*.[0-9]+","0|[1-9][0-9]*"  ,"\g[^\g]\g"
token -cap  "type-id"               ,"id"
    as      "[A-Z][a-zA-Z0-9_]*"    ,"[a-z][a-zA-Z0-9_]*"
#keywords to bind outside parser: let, match, with, block, this, true, false, null

#Groups
group "parenthese" {"lpar","lbrace","lbracket","rpar","rbrace","rbracket"}
group "operator" {"plus","minus","times","divide","modulo","power","and","or","imp","biimp","not","eq","not-eq","gt","geq","lt","leq","lapp","rapp","rarr","up","amp","tilde"}
group "delimiter" {"comma","dot","mid","scolon"}

!token "\\n", " "

#Precedence
#misc ops
prec "mid"       1
prec "qmark"     1
prec "colon"     1
prec "dcolon"    0
prec "scolon"    1
prec "dot"       1
prec "dotdot"    1
#ops
prec "rarr"      2
prec "rapp"      3
prec "lapp"      4

prec "eq"        5
prec "not-eq"    5
prec "gt"        5
prec "geq"       5
prec "lt"        5
prec "leq"       5
#bitwise
prec "sleft"     6
prec "sright"    6
prec "amp"       7
prec "up"        8
prec "bslash"    9
prec "tilde"    10
#aritmethic
prec "minus"    11
prec "plus"     11
prec "times"    12
prec "divide"   12
prec "modulo"   13
prec "power"    13
#logical
prec "biimp"    14
prec "imp"      15
prec "or"       16
prec "and"      17
prec "not"      18

#Associacivity
assoc "left" : "lapp","eq","not-eq","gt","geq","lt","leq","minus","plus","times","divide","modulo","not","and","or","amp","bslash","up","scolon","sleft","sright","dot","dotdot","colon","mid"
assoc "right" : "rapp","imp","biimp","power","dcolon","rarr"

#Start prod
prod Stmt       -> Bind "scolon" Stmt
                 | Exp
#Assign
prod Bind       -> "let" IdTuple "assign" Stmt
                 | "type" "type-id" "assign" TypeCnstr
#Arithmetic
prod Exp        -> Exp "plus" Exp
prod Exp        -> Exp "minus" Exp
prod Exp        -> Exp "times" Exp
prod Exp        -> Exp "divide" Exp
prod Exp        -> Exp "modulo" Exp
prod Exp        -> Exp "power" Exp
prod Exp        -> "minus" Exp
#Logic
prod Exp        -> Exp "and" Exp
prod Exp        -> Exp "or" Exp
prod Exp        -> Exp "imp" Exp
prod Exp        -> Exp "biimp" Exp
prod Exp        -> "not" Exp
#Bitwise
prod Exp        -> Exp "up" Exp
prod Exp        -> Exp "bslash" Exp
prod Exp        -> Exp "amp" Exp
prod Exp        -> Exp "sleft" Exp
prod Exp        -> Exp "sright" Exp
prod Exp        -> "tilde" Exp
#Relations
prod Exp        -> Exp "eq" Exp
prod Exp        -> Exp "not-eq" Exp
prod Exp        -> Exp "gt" Exp
prod Exp        -> Exp "geq" Exp
prod Exp        -> Exp "lt" Exp
prod Exp        -> Exp "leq" Exp
#Ranges
prod Exp        -> Exp "dotdot" Exp
#Functions
prod Exp        -> Exp "lapp" Exp
prod Exp        -> Exp "rapp" Exp
prod Exp        -> Exp "rarr" Exp
#type assign
prod Exp        -> Exp "colon" Exp
#data ops
prod Exp        -> Exp "dcolon" Exp
#blocks
prod Exp        -> "block" Stmt "scolon"
#Matching
prod Exp        -> "match" Exp "with" "mid" Matcher
prod Matcher    -> MatchLeft MatchWhen "colon" Stmt Matcher'
prod Matcher'   -> "mid" Matcher
                 | "scolon"
prod MatchLeft  -> Atom MatchLeft'
                 | Type Atom MatchLeft'
prod MatchLeft' -> "dcolon" Atom
                 |
prod MatchWhen  -> "qmark" Exp |

#Atoms
prod Exp        -> Atom
                 | Type
prod Atom       -> Atom' | "lpar" AtomTuple "rpar"
prod AtomTuple  -> Exp AtomTuple' |
prod AtomTuple' -> "comma" Exp AtomTuple' |
prod Atom'      -> Atom'' AtomIndexer
prod Atom''     -> "int"
                 | "float"
                 | "hex"
                 | "binary"
                 | "string"
                 | "id"
                 | "uscore"
                 | List
                 | Arr
prod AtomIndexer-> "dot" Atom'' AtomIndexer
                 | "lbracket" Stmt "rbracket"
                 | 
prod IdTuple    -> Id IdTuple'
                 | "lpar" Id IdTuple' "rpar"
prod IdTuple'   -> "comma" Id IdTuple'
                 |
prod Id         -> "id" | "uscore"
prod Type       -> "type-id" Type'
prod Type'      -> "dot" Type''
                 |
prod Type''     -> "id" Type'
                 | "type-id" Type'
prod TypeCnstr  -> "type-id" TypeCnstr1 TypeCnstr0
prod TypeCnstr0 -> "mid" TypeCnstr
                 |
prod TypeCnstr1 -> "of" TypeCnstr2
                 | 
prod TypeCnstr2 -> TypeCnstr2 "times" TypeCnstr2
                 | TypeCnstr2 "rarr" TypeCnstr2
                 | TypeCnstr3
prod TypeCnstr3 -> Type #in order to contruct complecx types like List.String
                 | "lpar" TypeCnstr2 "rpar"
#Complex literals
prod List       -> "lbracket" SMaker "rbracket"
prod Arr        -> "lbracketm" SMaker "rbracketm"
prod SMaker     -> Exp SMaker'
                 |
prod SMaker'    -> "scolon" Exp SMaker'
                 |
