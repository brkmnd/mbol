    var actionType = {
        shift:function(d){
            return {type:"shift",v:d};
            },
        reduce:function(d){
            return {type:"reduce",v:d};
            },
        accept:function(d){
            return {type:"accept",v:null};
            },
        error:function(msg){
            return {type:"error",v:msg};
            },
        none:function(){
            return {type:"none",v:null};
            },
        some:function(v){
            return {type:"some",v:v}
            }
        };
    var isSome = function(m){
        return m.t === "some";
        };
    var isNone = function(m){
        return m.t === "none";
        };
    var _token = function(m,o){
        //m.tv = token val
        //m.t = some/none
        //m.v = value if some, else null
        if(o[m.tt] !== undefined){
            return o[m.tt](m.tt,m.tv);
            }
        };
    /* prgType is for types within the execution of the mbol program.
     */
    var addToken2tree = function(tree,node){
        _token(node,{
            "hex":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["int"],nodeType:"leaf",v:parseInt(tokenVal,16)});
                },
            "binary":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["int"],nodeType:"leaf",v:parseInt(tokenVal.substr(2),2)});
                },
            "float":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["float"],nodeType:"leaf",v:parseFloat(tokenVal)});
                },
            "int":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["int"],nodeType:"leaf",v:parseInt(tokenVal)});
                },
            "string":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["string"],nodeType:"leaf",v:tokenVal});
                },
            "type-id":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["#"],nodeType:"leaf",v:tokenVal});
                },
            "id":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["@"],nodeType:"leaf",v:tokenVal});
                },
            "bool":function(tokenType,tokenVal){
                tree.push({type:"atom",prgType:["bool"],nodeType:"leaf",v:tokenVal});
                }
           });
        return tree;
        };
    var errors = {
        syntax:function(pos,msg){
            return "syntax error at (" + pos.y + "," + pos.x + "):" + msg;
            },
        garbage:function(g){
            return "garbage in expression: '" + g + "'";
            }
        };
    var pushBinOp = function(tree,op){
        var opR = tree.pop();
        var opL = tree.pop();
        tree.push({type:"op-bin",prgType:["@"],nodeType:"bin",v:op,args:[opL,opR]});
        return tree;
        };
    var pushUnOp = function(tree,op){
        var opOne = tree.pop();
        tree.push({type:"op-un",prgType:["@"],nodeType:"unary",v:op,args:[opOne]});
        return tree;
        };
    /* Change Me! Create the abstract syntax tree here */
    var productions_fun = {
        //[0] __ -> Stmt 
        0:function(tree){ return tree; },
        //[1] Stmt -> Exp 
        1:function(tree){
            //work done in production[2]
            var expr = tree.pop();
            tree.push({type:"scope",lines:[expr]});
            return tree;
            },
        //[2] Stmt -> Bind scolon Stmt 
        2:function(tree){
            var stmt = tree.pop();
            var binding = tree.pop();
            var scope = function(){
                if(tree.peek().type === "scope"){
                    return tree.pop();
                    }
                return {type:"scope",v:"inner",lines:[]};
                }();
            scope.lines.push(binding);
            scope.lines = scope.lines.concat(stmt.lines);
            tree.push(scope);
            return tree;
            },
        //[3] Bind -> type type-id assign TypeCnstr 
        3:function(tree){
            var plusses = tree.pop();
            var id = tree.pop();
            tree.push({type:"binding-type",id:id,args:[plusses],prgType:["#"]});
            return tree;
            },
        //[4] Bind -> let IdTuple assign Stmt 
        4:function(tree){
            var stmt = tree.pop();
            var id = tree.pop();
            tree.push({type:"binding",prgType:"@",id:id.args,lines:stmt.lines});
            return tree;
            },
        //[5] Matcher -> MatchLeft MatchWhen colon Stmt Matcher' 
        5:function(tree){
            var cases = tree.pop();
            var block = tree.pop();
            var when = tree.pop();
            var left = tree.pop();
            cases.args.push({mleft:left.args,mwhen:when.args,mblock:block});
            tree.push(cases);
            return tree;
            },
        //[6] Matcher' -> scolon 
        6:function(tree){
            tree.push({type:"cases",args:[]});
            return tree;
            },
        //[7] Matcher' -> mid Matcher 
        7:function(tree){
            //work done in [5]
            return tree;
            },
        //[8] MatchLeft -> Type Atom MatchLeft' 
        8:function(tree){
            var op = tree.pop();
            var bind = tree.pop();
            var type = tree.pop();
            op.args.reverse();
            tree.push({type:"matchleft",v:"",args:[type,bind,op]});
            return tree;
            },
        //[9] MatchLeft -> Atom MatchLeft' 
        9:function(tree){
            var op = tree.pop();
            var bind = tree.pop();
            op.args.reverse();
            tree.push({type:"matchleft",v:"",args:[bind,op]});
            return tree;
            },
        //[10] MatchLeft' -> 
        10:function(tree){
            tree.push({type:"matchleft-op",v:"dcolon",args:[]});
            return tree;
            },
        //[11] MatchLeft' -> dcolon Atom MatchLeft'
        11:function(tree){
            var ops = tree.pop();
            var op = tree.pop();
            ops.args.push(op);
            tree.push(ops);
            return tree;
            },
        //[12] MatchWhen -> 
        12:function(tree){
            tree.push({type:"matchwhen",v:null,args:[]});
            return tree;
            },
        //[13] MatchWhen -> qmark Exp 
        13:function(tree){
            var expr = tree.pop();
            tree.push({type:"matchwhen",v:"",args:[expr]});
            return tree;
            },
        //[14] Exp -> Exp plus Exp 
        14:function(tree){
            return pushBinOp(tree,"plus");
            },
        //[15] Exp -> Exp minus Exp 
        15:function(tree){
            return pushBinOp(tree,"minus");
            },
        //[16] Exp -> Exp times Exp 
        16:function(tree){
            return pushBinOp(tree,"times");
            },
        //[17] Exp -> Exp divide Exp 
        17:function(tree){
            return pushBinOp(tree,"divide");
            },
        //[18] Exp -> Exp modulo Exp 
        18:function(tree){
            return pushBinOp(tree,"modulo");
            },
        //[19] Exp -> Exp power Exp 
        19:function(tree){
            return pushBinOp(tree,"power");
            },
        //[20] Exp -> minus Exp 
        20:function(tree){
            return pushUnOp(tree,"minus");
            },
        //[21] Exp -> Exp and Exp 
        21:function(tree){
            return pushBinOp(tree,"logical-and");
            },
        //[22] Exp -> Exp or Exp 
        22:function(tree){
            return pushBinOp(tree,"logical-or");
            },
        //[23] Exp -> Exp imp Exp 
        23:function(tree){
            return pushBinOp(tree,"logical-imp");
            },
        //[24] Exp -> Exp biimp Exp 
        24:function(tree){
            return pushBinOp(tree,"logical-biimp");
            },
        //[25] Exp -> not Exp 
        25:function(tree){
            return pushUnOp(tree,"logical-not");
            },
        //[26] Exp -> Exp up Exp 
        26:function(tree){
            return pushBinOp(tree,"bit-xor");
            },
        //[27] Exp -> Exp bslash Exp 
        27:function(tree){
            return pushBinOp(tree,"bit-or");
            },
        //[28] Exp -> Exp amp Exp 
        28:function(tree){
            return pushBinOp(tree,"bit-and");
            },
        //[29] Exp -> Exp sleft Exp 
        29:function(tree){
            return pushBinOp(tree,"bit-sleft");
            },
        //[30] Exp -> Exp sright Exp 
        30:function(tree){
            return pushBinOp(tree,"bit-sright");
            },
        //[31] Exp -> tilde Exp 
        31:function(tree){
            return pushUnOp(tree,"bit-not");
            },
        //[32] Exp -> Exp eq Exp 
        32:function(tree){
            return pushBinOp(tree,"comp-eq");
            },
        //[33] Exp -> Exp not-eq Exp 
        33:function(tree){
            return pushBinOp(tree,"comp-neq");
            },
        //[34] Exp -> Exp gt Exp 
        34:function(tree){
            return pushBinOp(tree,"comp-gt");
            },
        //[35] Exp -> Exp geq Exp 
        35:function(tree){
            return pushBinOp(tree,"comp-geq");
            },
        //[36] Exp -> Exp lt Exp 
        36:function(tree){
            return pushBinOp(tree,"comp-lt");
            },
        //[37] Exp -> Exp leq Exp 
        37:function(tree){
            return pushBinOp(tree,"comp-leq");
            },
        //[38] Exp -> Exp dotdot Exp 
        38:function(tree){
            return pushBinOp(tree,"range");
            },
        //[39] Exp -> Exp lapp Exp 
        39:function(tree){
            return pushBinOp(tree,"app-left");
            },
        //[40] Exp -> Exp rapp Exp 
        40:function(tree){
            return pushBinOp(tree,"app-right");
            },
        //[41] Exp -> Exp rarr Exp 
        41:function(tree){
            return pushBinOp(tree,"lambda");
            },
        //[42] Exp -> Exp colon Exp 
        42:function(tree){
            return pushBinOp(tree,"colon");
            },
        //[43] Exp -> Exp dcolon Exp 
        43:function(tree){
            return pushBinOp(tree,"dcolon");
            },
        //[44] Exp -> block Stmt scolon 
        44:function(tree){
            tree.peek().type = "block";
            return tree;
            },
        //[45] Exp -> match Exp with mid Matcher 
        45:function(tree){
            //hertil
            var cases = tree.pop();
            var expr = tree.pop();
            cases.args.reverse();
            tree.push({type:"match",cases:cases.args,expr:expr});
            return tree;
            },
        //[46] Exp -> Type 
        46:function(tree){ return tree; },
        //[47] Exp -> Atom 
        47:function(tree){ return tree; },
        //[48] Atom -> lpar AtomTuple rpar 
        48:function(tree){ return tree; },
        //[49] Atom -> Atom' 
        49:function(tree){ return tree; },
        //[50] AtomTuple -> 
        50:function(tree){
            tree.push({type:"atom-tuple",prgType:["@"],args:[]});
            return tree;
            },
        //[51] AtomTuple -> Exp AtomTuple' 
        51:function(tree){
            var atomComp = tree.pop();
            var atomExp = tree.pop();
            atomComp.args.push(atomExp);
            atomComp.args.reverse();
            tree.push(atomComp);
            return tree;
            },
        //[52] AtomTuple' -> 
        52:function(tree){
            tree.push({type:"atom-tuple",prgType:["@"],args:[]});
            return tree;
            },
        //[53] AtomTuple' -> comma Exp AtomTuple' 
        53:function(tree){
            var atomComp = tree.pop();
            var atomExp = tree.pop();
            atomComp.args.push(atomExp);
            tree.push(atomComp);
            return tree;
            },
        //[54] Atom' -> Atom'' AtomIndexer 
        54:function(tree){ return tree; },
        //[55] Atom'' -> Arr 
        55:function(tree){ return tree; },
        //[56] Atom'' -> List 
        56:function(tree){ return tree; },
        //[57] Atom'' -> uscore 
        57:function(tree){ return tree; },
        //[58] Atom'' -> id 
        58:function(tree){ return tree; },
        //[59] Atom'' -> string 
        59:function(tree){ return tree; },
        //[60] Atom'' -> bool 
        60:function(tree){ return tree; },
        //[61] Atom'' -> binary 
        61:function(tree){ return tree; },
        //[62] Atom'' -> hex 
        62:function(tree){ return tree; },
        //[63] Atom'' -> float 
        63:function(tree){ return tree; },
        //[64] Atom'' -> int 
        64:function(tree){ return tree; },
        //[65] AtomIndexer -> 
        65:function(tree){ return tree; },
        //[66] AtomIndexer -> lbracket Exp rbracket 
        66:function(tree){
            var ind = tree.pop();
            var items = tree.pop();
            tree.push({type:"indexing",items:items,ind:ind});
            return tree;
            },
        //[67] AtomIndexer -> dot Atom'' AtomIndexer 
        67:function(tree){ return tree; },
        //[68] IdTuple -> lpar Id IdTuple' rpar 
        68:function(tree){ return tree; },
        //[69] IdTuple -> Id IdTuple' 
        69:function(tree){
            var items = tree.pop();
            var id = tree.pop();
            items.args.push(id);
            items.args.reverse();
            tree.push(items);
            return tree;
            },
        //[70] IdTuple' -> 
        70:function(tree){
            tree.push({type:"id-tuple",v:"",args:[]});
            return tree;
            },
        //[71] IdTuple' -> comma Id IdTuple' 
        71:function(tree){
            var items = tree.pop();
            var id = tree.pop();
            items.args.push(id);
            tree.push(items);
            return tree;
            },
        //[72] Id -> uscore 
        72:function(tree){ return tree; },
        //[73] Id -> id 
        73:function(tree){ return tree; },
        //[74] Type -> type-id Type' 
        74:function(tree){
            var typeComp = tree.pop();
            var typeId = tree.pop();
            typeComp.args.push(typeId);
            typeComp.args.reverse();
            tree.push(typeComp);
            return tree;
            },
        //[75] Type' -> 
        75:function(tree){
            tree.push({type:"type-id",v:".index",args:[]});
            return tree;
            },
        //[76] Type' -> dot Type'' 
        76:function(tree){
            return tree;
            },
        //[77] Type'' -> type-id Type' 
        77:function(tree){
            var typeComp = tree.pop();
            var typeId = tree.pop();
            typeComp.args.push(typeId);
            tree.push(typeComp);
            return tree;
            },
        //[78] Type'' -> id Type' 
        78:function(tree){
            var typeComp = tree.pop();
            var typeId = tree.pop();
            type_comp.args.push(typeId);
            tree.push(typeComp);
            return tree;
            },
        //[79] TypeCnstr -> type-id TypeCnstr1 TypeCnstr0 
        79:function(tree){
            var plusses = tree.pop();
            var body = tree.pop();
            var id = tree.pop();
            plusses.args.push({type:"type-constr",id:id.v,body:body});
            plusses.args.reverse();
            tree.push(plusses);
            return tree;
            },
        //[80] TypeCnstr0 -> 
        80:function(tree){
            tree.push({type:"type-plus",v:"",args:[]});
            return tree;
            },
        //[81] TypeCnstr0 -> mid TypeCnstr 
        81:function(tree){
            /* Work is done in TypeCnstr production */
            return tree;
            },
        //[82] TypeCnstr1 -> 
        82:function(tree){
            tree.push({type:"type-constr-body",v:null});
            return tree;
            },
        //[83] TypeCnstr1 -> of TypeCnstr2 
        83:function(tree){
            var typeBody = tree.pop();
            tree.push({type:"type-constr-body",v:null,args:[typeBody]});
            return tree;
            },
        //[84] TypeCnstr2 -> TypeCnstr3 
        84:function(tree){ return tree; },
        //[85] TypeCnstr2 -> TypeCnstr2 rarr TypeCnstr2 
        85:function(tree){
            return pushBinOp(tree,"type-fun");
            },
        //[86] TypeCnstr2 -> TypeCnstr2 times TypeCnstr2 
        86:function(tree){
            return pushBinOp(tree,"type-prod");
            },
        //[87] TypeCnstr3 -> lpar TypeCnstr2 rpar 
        87:function(tree){ return tree; },
        //[88] TypeCnstr3 -> Type 
        88:function(tree){
            var list = tree.pop();
            list.type = "list";
            list.prgType = ["list","@"];
            tree.push(list);
            return tree;
            },
        //[89] List -> lbracket SMaker rbracket 
        89:function(tree){
            var list = tree.pop();
            list.type = "list";
            list.prgType = ["list","@"];
            tree.push(list);
            return tree;
            },
        //[90] Arr -> lbracketm SMaker rbracketm 
        90:function(tree){
            var arr = tree.pop();
            arr.type = "array";
            arr.prgType = ["array","@"];
            tree.push(arr);
            return tree;
            },
        //[91] SMaker -> 
        91:function(tree){ return tree; },
        //[92] SMaker -> Exp SMaker' 
        92:function(tree){
            var items = tree.pop();
            var item = tree.pop();
            items.args.push(item);
            items.args.reverse();
            tree.push(items);
            return tree;
            },
        //[93] SMaker' -> 
        93:function(tree){
            tree.push({type:".items",v:"",args:[]});
            return tree;
            },
        //[94] SMaker' -> scolon Exp SMaker' 
        94:function(tree){
            var items = tree.pop();
            var item = tree.pop();
            items.args.push(item);
            tree.push(items);
            return tree;
            }
        };
    var productions_str = {
        0:{prod:"__",rside:[ "Stmt"]},
        1:{prod:"Stmt",rside:[ "Exp"]},
        2:{prod:"Stmt",rside:[ "Bind","scolon","Stmt"]},
        3:{prod:"Bind",rside:[ "type","type-id","assign","TypeCnstr"]},
        4:{prod:"Bind",rside:[ "let","IdTuple","assign","Stmt"]},
        5:{prod:"Matcher",rside:[ "MatchLeft","MatchWhen","colon","Stmt","Matcher'"]},
        6:{prod:"Matcher'",rside:[ "scolon"]},
        7:{prod:"Matcher'",rside:[ "mid","Matcher"]},
        8:{prod:"MatchLeft",rside:[ "Type","Atom","MatchLeft'"]},
        9:{prod:"MatchLeft",rside:[ "Atom","MatchLeft'"]},
        10:{prod:"MatchLeft'",rside:[]},
        11:{prod:"MatchLeft'",rside:[ "dcolon","Atom","MatchLeft'"]},
        12:{prod:"MatchWhen",rside:[]},
        13:{prod:"MatchWhen",rside:[ "qmark","Exp"]},
        14:{prod:"Exp",rside:[ "Exp","plus","Exp"]},
        15:{prod:"Exp",rside:[ "Exp","minus","Exp"]},
        16:{prod:"Exp",rside:[ "Exp","times","Exp"]},
        17:{prod:"Exp",rside:[ "Exp","divide","Exp"]},
        18:{prod:"Exp",rside:[ "Exp","modulo","Exp"]},
        19:{prod:"Exp",rside:[ "Exp","power","Exp"]},
        20:{prod:"Exp",rside:[ "minus","Exp"]},
        21:{prod:"Exp",rside:[ "Exp","and","Exp"]},
        22:{prod:"Exp",rside:[ "Exp","or","Exp"]},
        23:{prod:"Exp",rside:[ "Exp","imp","Exp"]},
        24:{prod:"Exp",rside:[ "Exp","biimp","Exp"]},
        25:{prod:"Exp",rside:[ "not","Exp"]},
        26:{prod:"Exp",rside:[ "Exp","up","Exp"]},
        27:{prod:"Exp",rside:[ "Exp","bslash","Exp"]},
        28:{prod:"Exp",rside:[ "Exp","amp","Exp"]},
        29:{prod:"Exp",rside:[ "Exp","sleft","Exp"]},
        30:{prod:"Exp",rside:[ "Exp","sright","Exp"]},
        31:{prod:"Exp",rside:[ "tilde","Exp"]},
        32:{prod:"Exp",rside:[ "Exp","eq","Exp"]},
        33:{prod:"Exp",rside:[ "Exp","not-eq","Exp"]},
        34:{prod:"Exp",rside:[ "Exp","gt","Exp"]},
        35:{prod:"Exp",rside:[ "Exp","geq","Exp"]},
        36:{prod:"Exp",rside:[ "Exp","lt","Exp"]},
        37:{prod:"Exp",rside:[ "Exp","leq","Exp"]},
        38:{prod:"Exp",rside:[ "Exp","dotdot","Exp"]},
        39:{prod:"Exp",rside:[ "Exp","lapp","Exp"]},
        40:{prod:"Exp",rside:[ "Exp","rapp","Exp"]},
        41:{prod:"Exp",rside:[ "Exp","rarr","Exp"]},
        42:{prod:"Exp",rside:[ "Exp","colon","Exp"]},
        43:{prod:"Exp",rside:[ "Exp","dcolon","Exp"]},
        44:{prod:"Exp",rside:[ "block","Stmt","scolon"]},
        45:{prod:"Exp",rside:[ "match","Exp","with","mid","Matcher"]},
        46:{prod:"Exp",rside:[ "Type"]},
        47:{prod:"Exp",rside:[ "Atom"]},
        48:{prod:"Atom",rside:[ "lpar","AtomTuple","rpar"]},
        49:{prod:"Atom",rside:[ "Atom'"]},
        50:{prod:"AtomTuple",rside:[]},
        51:{prod:"AtomTuple",rside:[ "Exp","AtomTuple'"]},
        52:{prod:"AtomTuple'",rside:[]},
        53:{prod:"AtomTuple'",rside:[ "comma","Exp","AtomTuple'"]},
        54:{prod:"Atom'",rside:[ "Atom''","AtomIndexer"]},
        55:{prod:"Atom''",rside:[ "Arr"]},
        56:{prod:"Atom''",rside:[ "List"]},
        57:{prod:"Atom''",rside:[ "uscore"]},
        58:{prod:"Atom''",rside:[ "id"]},
        59:{prod:"Atom''",rside:[ "string"]},
        60:{prod:"Atom''",rside:[ "bool"]},
        61:{prod:"Atom''",rside:[ "binary"]},
        62:{prod:"Atom''",rside:[ "hex"]},
        63:{prod:"Atom''",rside:[ "float"]},
        64:{prod:"Atom''",rside:[ "int"]},
        65:{prod:"AtomIndexer",rside:[]},
        66:{prod:"AtomIndexer",rside:[ "lbracket","Exp","rbracket"]},
        67:{prod:"AtomIndexer",rside:[ "dot","Atom''","AtomIndexer"]},
        68:{prod:"IdTuple",rside:[ "lpar","Id","IdTuple'","rpar"]},
        69:{prod:"IdTuple",rside:[ "Id","IdTuple'"]},
        70:{prod:"IdTuple'",rside:[]},
        71:{prod:"IdTuple'",rside:[ "comma","Id","IdTuple'"]},
        72:{prod:"Id",rside:[ "uscore"]},
        73:{prod:"Id",rside:[ "id"]},
        74:{prod:"Type",rside:[ "type-id","Type'"]},
        75:{prod:"Type'",rside:[]},
        76:{prod:"Type'",rside:[ "dot","Type''"]},
        77:{prod:"Type''",rside:[ "type-id","Type'"]},
        78:{prod:"Type''",rside:[ "id","Type'"]},
        79:{prod:"TypeCnstr",rside:[ "type-id","TypeCnstr1","TypeCnstr0"]},
        80:{prod:"TypeCnstr0",rside:[]},
        81:{prod:"TypeCnstr0",rside:[ "mid","TypeCnstr"]},
        82:{prod:"TypeCnstr1",rside:[]},
        83:{prod:"TypeCnstr1",rside:[ "of","TypeCnstr2"]},
        84:{prod:"TypeCnstr2",rside:[ "TypeCnstr3"]},
        85:{prod:"TypeCnstr2",rside:[ "TypeCnstr2","rarr","TypeCnstr2"]},
        86:{prod:"TypeCnstr2",rside:[ "TypeCnstr2","times","TypeCnstr2"]},
        87:{prod:"TypeCnstr3",rside:[ "lpar","TypeCnstr2","rpar"]},
        88:{prod:"TypeCnstr3",rside:[ "Type"]},
        89:{prod:"List",rside:[ "lbracket","SMaker","rbracket"]},
        90:{prod:"Arr",rside:[ "lbracketm","SMaker","rbracketm"]},
        91:{prod:"SMaker",rside:[]},
        92:{prod:"SMaker",rside:[ "Exp","SMaker'"]},
        93:{prod:"SMaker'",rside:[]},
        94:{prod:"SMaker'",rside:[ "scolon","Exp","SMaker'"]}
        };

    var lexer = function(inStr){
        var rxStr =
            "(\\|>)|"+
            "(<\\|)|"+
            "(->)|"+
            "(<<)|"+
            "(>>)|"+
            "(\\[\\|)|"+
            "(\\|\\])|"+
            "(\\()|"+
            "(\\[)|"+
            "(\\))|"+
            "(\\])|"+
            "(\\+)|"+
            "(-)|"+
            "(\\*\\*)|"+
            "(\\/)|"+
            "(%)|"+
            "(\\*)|"+
            "(==)|"+
            "(!=)|"+
            "(>=)|"+
            "(<=)|"+
            "(>)|"+
            "(<)|"+
            "(\\&\\&)|"+
            "(\\|\\|)|"+
            "(=>)|"+
            "(<=>)|"+
            "(!)|"+
            "(\\\\)|"+
            "(\\^)|"+
            "(\\&)|"+
            "(~)|"+
            "(;)|"+
            "(::)|"+
            "(:)|"+
            "(let)|"+
            "(type)|"+
            "(=)|"+
            "(match)|"+
            "(with)|"+
            "(block)|"+
            "(of)|"+
            "(0x[0-9a-fA-F]+)|"+
            "(0b[01]+)|"+
            "([0-9]*\\.[0-9]+)|"+
            "(0|[1-9][0-9]*)|"+
            "\"([^\"]*)\"|"+
            "(true|false)|"+
            "([A-Z][a-zA-Z0-9_]*)|"+
            "([a-z][a-zA-Z0-9_]*)|"+
            "(,)|"+
            "(\\.\\.)|"+
            "(\\.)|"+
            "(\\|)|"+
            "(_)|"+
            "(\\?)|"+
            "\\n|"+
            " ";
        var rx = new RegExp(rxStr,"g");
        var retI = 0;
        var retval = {};
        var linepos = {lnr:1,start:0};
        var removeComments = function(str){
            var multCommOn = false;
            var sCommOn = false;
            var retval = "";
            for(var i = 0; i < str.length; i++){
                var c0 = str[i];
                var c1 = function(){
                    if(i < str.length - 1){
                        return str[i + 1];
                        }
                    return "";
                    }();
                if(c0 === "/" && c1 === "*"){
                    i++;
                    multCommOn = true;
                    }
                else if(c0 === "*" && c1 === "/"){
                    i += 1;
                    multCommOn = false;
                    continue;
                    }
                if(!multCommOn){
                    retval += c0;
                    }
                }
            return retval;
            };
        var resStr = removeComments(inStr).replace(rx,
            function(a,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,posX){
                if(a === "\n"){
                    linepos.lnr++;
                    linepos.start = posX;
                    }
                if(typeof i1 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lapp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i2 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rapp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i3 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rarr",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i4 !== "undefined"){
                    retval[retI] = {t:"none",tt:"sleft",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i5 !== "undefined"){
                    retval[retI] = {t:"none",tt:"sright",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i6 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lbracketm",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i7 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rbracketm",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i8 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lpar",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i9 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lbracket",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i10 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rpar",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i11 !== "undefined"){
                    retval[retI] = {t:"none",tt:"rbracket",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i12 !== "undefined"){
                    retval[retI] = {t:"none",tt:"plus",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i13 !== "undefined"){
                    retval[retI] = {t:"none",tt:"minus",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i14 !== "undefined"){
                    retval[retI] = {t:"none",tt:"power",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i15 !== "undefined"){
                    retval[retI] = {t:"none",tt:"divide",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i16 !== "undefined"){
                    retval[retI] = {t:"none",tt:"modulo",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i17 !== "undefined"){
                    retval[retI] = {t:"none",tt:"times",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i18 !== "undefined"){
                    retval[retI] = {t:"none",tt:"eq",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i19 !== "undefined"){
                    retval[retI] = {t:"none",tt:"not-eq",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i20 !== "undefined"){
                    retval[retI] = {t:"none",tt:"geq",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i21 !== "undefined"){
                    retval[retI] = {t:"none",tt:"leq",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i22 !== "undefined"){
                    retval[retI] = {t:"none",tt:"gt",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i23 !== "undefined"){
                    retval[retI] = {t:"none",tt:"lt",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i24 !== "undefined"){
                    retval[retI] = {t:"none",tt:"and",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i25 !== "undefined"){
                    retval[retI] = {t:"none",tt:"or",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i26 !== "undefined"){
                    retval[retI] = {t:"none",tt:"imp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i27 !== "undefined"){
                    retval[retI] = {t:"none",tt:"biimp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i28 !== "undefined"){
                    retval[retI] = {t:"none",tt:"not",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i29 !== "undefined"){
                    retval[retI] = {t:"none",tt:"bslash",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i30 !== "undefined"){
                    retval[retI] = {t:"none",tt:"up",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i31 !== "undefined"){
                    retval[retI] = {t:"none",tt:"amp",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i32 !== "undefined"){
                    retval[retI] = {t:"none",tt:"tilde",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i33 !== "undefined"){
                    retval[retI] = {t:"none",tt:"scolon",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i34 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dcolon",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i35 !== "undefined"){
                    retval[retI] = {t:"none",tt:"colon",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i36 !== "undefined"){
                    retval[retI] = {t:"none",tt:"let",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i37 !== "undefined"){
                    retval[retI] = {t:"none",tt:"type",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i38 !== "undefined"){
                    retval[retI] = {t:"none",tt:"assign",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i39 !== "undefined"){
                    retval[retI] = {t:"none",tt:"match",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i40 !== "undefined"){
                    retval[retI] = {t:"none",tt:"with",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i41 !== "undefined"){
                    retval[retI] = {t:"none",tt:"block",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i42 !== "undefined"){
                    retval[retI] = {t:"none",tt:"of",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i43 !== "undefined"){
                    retval[retI] = {t:"some",tt:"hex",tv:i43,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i44 !== "undefined"){
                    retval[retI] = {t:"some",tt:"binary",tv:i44,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i45 !== "undefined"){
                    retval[retI] = {t:"some",tt:"float",tv:i45,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i46 !== "undefined"){
                    retval[retI] = {t:"some",tt:"int",tv:i46,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i47 !== "undefined"){
                    retval[retI] = {t:"some",tt:"string",tv:i47,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i48 !== "undefined"){
                    retval[retI] = {t:"some",tt:"bool",tv:i48,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i49 !== "undefined"){
                    retval[retI] = {t:"some",tt:"type-id",tv:i49,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i50 !== "undefined"){
                    retval[retI] = {t:"some",tt:"id",tv:i50,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i51 !== "undefined"){
                    retval[retI] = {t:"none",tt:"comma",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i52 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dotdot",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i53 !== "undefined"){
                    retval[retI] = {t:"none",tt:"dot",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i54 !== "undefined"){
                    retval[retI] = {t:"none",tt:"mid",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i55 !== "undefined"){
                    retval[retI] = {t:"none",tt:"uscore",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                else if(typeof i56 !== "undefined"){
                    retval[retI] = {t:"none",tt:"qmark",tv:null,posX:posX - linepos.start,posY:linepos.lnr};
                    retI++;
                    }
                return "";
                }
            );
        if(resStr !== ""){
            retval["__success"] = false;
            retval["__res"] = resStr;
            }
        else {
            retval[retI] = {t:"none",v:null,tt:"$",tv:null,posX:linepos.x - linepos.start,posY:linepos.lnr};
            }
        return retval;
        };
    var actionTable = {
        0:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'colon'"),
            "let":actionType.shift(19),
            "type":actionType.shift(26),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given '$'")
            },
        1:{
            "lapp":actionType.reduce(55),
            "rapp":actionType.reduce(55),
            "rarr":actionType.reduce(55),
            "sleft":actionType.reduce(55),
            "sright":actionType.reduce(55),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(55),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(55),
            "rpar":actionType.reduce(55),
            "rbracket":actionType.reduce(55),
            "plus":actionType.reduce(55),
            "minus":actionType.reduce(55),
            "power":actionType.reduce(55),
            "divide":actionType.reduce(55),
            "modulo":actionType.reduce(55),
            "times":actionType.reduce(55),
            "eq":actionType.reduce(55),
            "not-eq":actionType.reduce(55),
            "geq":actionType.reduce(55),
            "leq":actionType.reduce(55),
            "gt":actionType.reduce(55),
            "lt":actionType.reduce(55),
            "and":actionType.reduce(55),
            "or":actionType.reduce(55),
            "imp":actionType.reduce(55),
            "biimp":actionType.reduce(55),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(55),
            "up":actionType.reduce(55),
            "amp":actionType.reduce(55),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(55),
            "dcolon":actionType.reduce(55),
            "colon":actionType.reduce(55),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(55),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(55),
            "dotdot":actionType.reduce(55),
            "dot":actionType.reduce(55),
            "mid":actionType.reduce(55),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(55),
            "$":actionType.reduce(55)
            },
        2:{
            "lapp":actionType.reduce(47),
            "rapp":actionType.reduce(47),
            "rarr":actionType.reduce(47),
            "sleft":actionType.reduce(47),
            "sright":actionType.reduce(47),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(47),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(47),
            "rbracket":actionType.reduce(47),
            "plus":actionType.reduce(47),
            "minus":actionType.reduce(47),
            "power":actionType.reduce(47),
            "divide":actionType.reduce(47),
            "modulo":actionType.reduce(47),
            "times":actionType.reduce(47),
            "eq":actionType.reduce(47),
            "not-eq":actionType.reduce(47),
            "geq":actionType.reduce(47),
            "leq":actionType.reduce(47),
            "gt":actionType.reduce(47),
            "lt":actionType.reduce(47),
            "and":actionType.reduce(47),
            "or":actionType.reduce(47),
            "imp":actionType.reduce(47),
            "biimp":actionType.reduce(47),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(47),
            "up":actionType.reduce(47),
            "amp":actionType.reduce(47),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(47),
            "dcolon":actionType.reduce(47),
            "colon":actionType.reduce(47),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(47),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(47),
            "dotdot":actionType.reduce(47),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(47),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(47)
            },
        3:{
            "lapp":actionType.reduce(49),
            "rapp":actionType.reduce(49),
            "rarr":actionType.reduce(49),
            "sleft":actionType.reduce(49),
            "sright":actionType.reduce(49),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(49),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(49),
            "rbracket":actionType.reduce(49),
            "plus":actionType.reduce(49),
            "minus":actionType.reduce(49),
            "power":actionType.reduce(49),
            "divide":actionType.reduce(49),
            "modulo":actionType.reduce(49),
            "times":actionType.reduce(49),
            "eq":actionType.reduce(49),
            "not-eq":actionType.reduce(49),
            "geq":actionType.reduce(49),
            "leq":actionType.reduce(49),
            "gt":actionType.reduce(49),
            "lt":actionType.reduce(49),
            "and":actionType.reduce(49),
            "or":actionType.reduce(49),
            "imp":actionType.reduce(49),
            "biimp":actionType.reduce(49),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(49),
            "up":actionType.reduce(49),
            "amp":actionType.reduce(49),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(49),
            "dcolon":actionType.reduce(49),
            "colon":actionType.reduce(49),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(49),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(49),
            "dotdot":actionType.reduce(49),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(49),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(49),
            "$":actionType.reduce(49)
            },
        4:{
            "lapp":actionType.reduce(65),
            "rapp":actionType.reduce(65),
            "rarr":actionType.reduce(65),
            "sleft":actionType.reduce(65),
            "sright":actionType.reduce(65),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(65),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.shift(31),
            "rpar":actionType.reduce(65),
            "rbracket":actionType.reduce(65),
            "plus":actionType.reduce(65),
            "minus":actionType.reduce(65),
            "power":actionType.reduce(65),
            "divide":actionType.reduce(65),
            "modulo":actionType.reduce(65),
            "times":actionType.reduce(65),
            "eq":actionType.reduce(65),
            "not-eq":actionType.reduce(65),
            "geq":actionType.reduce(65),
            "leq":actionType.reduce(65),
            "gt":actionType.reduce(65),
            "lt":actionType.reduce(65),
            "and":actionType.reduce(65),
            "or":actionType.reduce(65),
            "imp":actionType.reduce(65),
            "biimp":actionType.reduce(65),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(65),
            "up":actionType.reduce(65),
            "amp":actionType.reduce(65),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(65),
            "dcolon":actionType.reduce(65),
            "colon":actionType.reduce(65),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(65),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(65),
            "dotdot":actionType.reduce(65),
            "dot":actionType.shift(30),
            "mid":actionType.reduce(65),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(65),
            "$":actionType.reduce(65)
            },
        5:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.shift(32),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        6:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'parenthese'"),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'operator'"),
            "scolon":actionType.reduce(1),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(1),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','delimiter','sleft','sright','eoi', but given 'qmark'"),
            "$":actionType.reduce(1)
            },
        7:{
            "lapp":actionType.reduce(56),
            "rapp":actionType.reduce(56),
            "rarr":actionType.reduce(56),
            "sleft":actionType.reduce(56),
            "sright":actionType.reduce(56),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(56),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(56),
            "rpar":actionType.reduce(56),
            "rbracket":actionType.reduce(56),
            "plus":actionType.reduce(56),
            "minus":actionType.reduce(56),
            "power":actionType.reduce(56),
            "divide":actionType.reduce(56),
            "modulo":actionType.reduce(56),
            "times":actionType.reduce(56),
            "eq":actionType.reduce(56),
            "not-eq":actionType.reduce(56),
            "geq":actionType.reduce(56),
            "leq":actionType.reduce(56),
            "gt":actionType.reduce(56),
            "lt":actionType.reduce(56),
            "and":actionType.reduce(56),
            "or":actionType.reduce(56),
            "imp":actionType.reduce(56),
            "biimp":actionType.reduce(56),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(56),
            "up":actionType.reduce(56),
            "amp":actionType.reduce(56),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(56),
            "dcolon":actionType.reduce(56),
            "colon":actionType.reduce(56),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(56),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(56),
            "dotdot":actionType.reduce(56),
            "dot":actionType.reduce(56),
            "mid":actionType.reduce(56),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(56),
            "$":actionType.reduce(56)
            },
        8:{
            "lapp":actionType.error("expected 'eoi', but given 'operator'"),
            "rapp":actionType.error("expected 'eoi', but given 'operator'"),
            "rarr":actionType.error("expected 'eoi', but given 'operator'"),
            "sleft":actionType.error("expected 'eoi', but given 'sleft'"),
            "sright":actionType.error("expected 'eoi', but given 'sright'"),
            "lbracketm":actionType.error("expected 'eoi', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'eoi', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'eoi', but given 'parenthese'"),
            "rpar":actionType.error("expected 'eoi', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'eoi', but given 'parenthese'"),
            "plus":actionType.error("expected 'eoi', but given 'operator'"),
            "minus":actionType.error("expected 'eoi', but given 'operator'"),
            "power":actionType.error("expected 'eoi', but given 'operator'"),
            "divide":actionType.error("expected 'eoi', but given 'operator'"),
            "modulo":actionType.error("expected 'eoi', but given 'operator'"),
            "times":actionType.error("expected 'eoi', but given 'operator'"),
            "eq":actionType.error("expected 'eoi', but given 'operator'"),
            "not-eq":actionType.error("expected 'eoi', but given 'operator'"),
            "geq":actionType.error("expected 'eoi', but given 'operator'"),
            "leq":actionType.error("expected 'eoi', but given 'operator'"),
            "gt":actionType.error("expected 'eoi', but given 'operator'"),
            "lt":actionType.error("expected 'eoi', but given 'operator'"),
            "and":actionType.error("expected 'eoi', but given 'operator'"),
            "or":actionType.error("expected 'eoi', but given 'operator'"),
            "imp":actionType.error("expected 'eoi', but given 'operator'"),
            "biimp":actionType.error("expected 'eoi', but given 'operator'"),
            "not":actionType.error("expected 'eoi', but given 'operator'"),
            "bslash":actionType.error("expected 'eoi', but given 'bslash'"),
            "up":actionType.error("expected 'eoi', but given 'operator'"),
            "amp":actionType.error("expected 'eoi', but given 'operator'"),
            "tilde":actionType.error("expected 'eoi', but given 'operator'"),
            "scolon":actionType.error("expected 'eoi', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'eoi', but given 'dcolon'"),
            "colon":actionType.error("expected 'eoi', but given 'colon'"),
            "let":actionType.error("expected 'eoi', but given 'let'"),
            "type":actionType.error("expected 'eoi', but given 'type'"),
            "assign":actionType.error("expected 'eoi', but given 'assign'"),
            "match":actionType.error("expected 'eoi', but given 'match'"),
            "with":actionType.error("expected 'eoi', but given 'with'"),
            "block":actionType.error("expected 'eoi', but given 'block'"),
            "of":actionType.error("expected 'eoi', but given 'of'"),
            "hex":actionType.error("expected 'eoi', but given 'hex'"),
            "binary":actionType.error("expected 'eoi', but given 'binary'"),
            "float":actionType.error("expected 'eoi', but given 'float'"),
            "int":actionType.error("expected 'eoi', but given 'int'"),
            "string":actionType.error("expected 'eoi', but given 'string'"),
            "bool":actionType.error("expected 'eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'eoi', but given 'type-id'"),
            "id":actionType.error("expected 'eoi', but given 'id'"),
            "comma":actionType.error("expected 'eoi', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'eoi', but given 'dotdot'"),
            "dot":actionType.error("expected 'eoi', but given 'delimiter'"),
            "mid":actionType.error("expected 'eoi', but given 'delimiter'"),
            "uscore":actionType.error("expected 'eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'eoi', but given 'qmark'"),
            "$":actionType.accept()
            },
        9:{
            "lapp":actionType.reduce(46),
            "rapp":actionType.reduce(46),
            "rarr":actionType.reduce(46),
            "sleft":actionType.reduce(46),
            "sright":actionType.reduce(46),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(46),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(46),
            "rbracket":actionType.reduce(46),
            "plus":actionType.reduce(46),
            "minus":actionType.reduce(46),
            "power":actionType.reduce(46),
            "divide":actionType.reduce(46),
            "modulo":actionType.reduce(46),
            "times":actionType.reduce(46),
            "eq":actionType.reduce(46),
            "not-eq":actionType.reduce(46),
            "geq":actionType.reduce(46),
            "leq":actionType.reduce(46),
            "gt":actionType.reduce(46),
            "lt":actionType.reduce(46),
            "and":actionType.reduce(46),
            "or":actionType.reduce(46),
            "imp":actionType.reduce(46),
            "biimp":actionType.reduce(46),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(46),
            "up":actionType.reduce(46),
            "amp":actionType.reduce(46),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(46),
            "dcolon":actionType.reduce(46),
            "colon":actionType.reduce(46),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(46),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(46),
            "dotdot":actionType.reduce(46),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(46),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(46)
            },
        10:{
            "lapp":actionType.reduce(61),
            "rapp":actionType.reduce(61),
            "rarr":actionType.reduce(61),
            "sleft":actionType.reduce(61),
            "sright":actionType.reduce(61),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(61),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(61),
            "rpar":actionType.reduce(61),
            "rbracket":actionType.reduce(61),
            "plus":actionType.reduce(61),
            "minus":actionType.reduce(61),
            "power":actionType.reduce(61),
            "divide":actionType.reduce(61),
            "modulo":actionType.reduce(61),
            "times":actionType.reduce(61),
            "eq":actionType.reduce(61),
            "not-eq":actionType.reduce(61),
            "geq":actionType.reduce(61),
            "leq":actionType.reduce(61),
            "gt":actionType.reduce(61),
            "lt":actionType.reduce(61),
            "and":actionType.reduce(61),
            "or":actionType.reduce(61),
            "imp":actionType.reduce(61),
            "biimp":actionType.reduce(61),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(61),
            "up":actionType.reduce(61),
            "amp":actionType.reduce(61),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(61),
            "dcolon":actionType.reduce(61),
            "colon":actionType.reduce(61),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(61),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(61),
            "dotdot":actionType.reduce(61),
            "dot":actionType.reduce(61),
            "mid":actionType.reduce(61),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(61),
            "$":actionType.reduce(61)
            },
        11:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'colon'"),
            "let":actionType.shift(19),
            "type":actionType.shift(26),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given '$'")
            },
        12:{
            "lapp":actionType.reduce(60),
            "rapp":actionType.reduce(60),
            "rarr":actionType.reduce(60),
            "sleft":actionType.reduce(60),
            "sright":actionType.reduce(60),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(60),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(60),
            "rpar":actionType.reduce(60),
            "rbracket":actionType.reduce(60),
            "plus":actionType.reduce(60),
            "minus":actionType.reduce(60),
            "power":actionType.reduce(60),
            "divide":actionType.reduce(60),
            "modulo":actionType.reduce(60),
            "times":actionType.reduce(60),
            "eq":actionType.reduce(60),
            "not-eq":actionType.reduce(60),
            "geq":actionType.reduce(60),
            "leq":actionType.reduce(60),
            "gt":actionType.reduce(60),
            "lt":actionType.reduce(60),
            "and":actionType.reduce(60),
            "or":actionType.reduce(60),
            "imp":actionType.reduce(60),
            "biimp":actionType.reduce(60),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(60),
            "up":actionType.reduce(60),
            "amp":actionType.reduce(60),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(60),
            "dcolon":actionType.reduce(60),
            "colon":actionType.reduce(60),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(60),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(60),
            "dotdot":actionType.reduce(60),
            "dot":actionType.reduce(60),
            "mid":actionType.reduce(60),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(60),
            "$":actionType.reduce(60)
            },
        13:{
            "lapp":actionType.reduce(63),
            "rapp":actionType.reduce(63),
            "rarr":actionType.reduce(63),
            "sleft":actionType.reduce(63),
            "sright":actionType.reduce(63),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(63),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(63),
            "rpar":actionType.reduce(63),
            "rbracket":actionType.reduce(63),
            "plus":actionType.reduce(63),
            "minus":actionType.reduce(63),
            "power":actionType.reduce(63),
            "divide":actionType.reduce(63),
            "modulo":actionType.reduce(63),
            "times":actionType.reduce(63),
            "eq":actionType.reduce(63),
            "not-eq":actionType.reduce(63),
            "geq":actionType.reduce(63),
            "leq":actionType.reduce(63),
            "gt":actionType.reduce(63),
            "lt":actionType.reduce(63),
            "and":actionType.reduce(63),
            "or":actionType.reduce(63),
            "imp":actionType.reduce(63),
            "biimp":actionType.reduce(63),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(63),
            "up":actionType.reduce(63),
            "amp":actionType.reduce(63),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(63),
            "dcolon":actionType.reduce(63),
            "colon":actionType.reduce(63),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(63),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(63),
            "dotdot":actionType.reduce(63),
            "dot":actionType.reduce(63),
            "mid":actionType.reduce(63),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(63),
            "$":actionType.reduce(63)
            },
        14:{
            "lapp":actionType.reduce(62),
            "rapp":actionType.reduce(62),
            "rarr":actionType.reduce(62),
            "sleft":actionType.reduce(62),
            "sright":actionType.reduce(62),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(62),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(62),
            "rpar":actionType.reduce(62),
            "rbracket":actionType.reduce(62),
            "plus":actionType.reduce(62),
            "minus":actionType.reduce(62),
            "power":actionType.reduce(62),
            "divide":actionType.reduce(62),
            "modulo":actionType.reduce(62),
            "times":actionType.reduce(62),
            "eq":actionType.reduce(62),
            "not-eq":actionType.reduce(62),
            "geq":actionType.reduce(62),
            "leq":actionType.reduce(62),
            "gt":actionType.reduce(62),
            "lt":actionType.reduce(62),
            "and":actionType.reduce(62),
            "or":actionType.reduce(62),
            "imp":actionType.reduce(62),
            "biimp":actionType.reduce(62),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(62),
            "up":actionType.reduce(62),
            "amp":actionType.reduce(62),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(62),
            "dcolon":actionType.reduce(62),
            "colon":actionType.reduce(62),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(62),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(62),
            "dotdot":actionType.reduce(62),
            "dot":actionType.reduce(62),
            "mid":actionType.reduce(62),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(62),
            "$":actionType.reduce(62)
            },
        15:{
            "lapp":actionType.reduce(58),
            "rapp":actionType.reduce(58),
            "rarr":actionType.reduce(58),
            "sleft":actionType.reduce(58),
            "sright":actionType.reduce(58),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(58),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(58),
            "rpar":actionType.reduce(58),
            "rbracket":actionType.reduce(58),
            "plus":actionType.reduce(58),
            "minus":actionType.reduce(58),
            "power":actionType.reduce(58),
            "divide":actionType.reduce(58),
            "modulo":actionType.reduce(58),
            "times":actionType.reduce(58),
            "eq":actionType.reduce(58),
            "not-eq":actionType.reduce(58),
            "geq":actionType.reduce(58),
            "leq":actionType.reduce(58),
            "gt":actionType.reduce(58),
            "lt":actionType.reduce(58),
            "and":actionType.reduce(58),
            "or":actionType.reduce(58),
            "imp":actionType.reduce(58),
            "biimp":actionType.reduce(58),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(58),
            "up":actionType.reduce(58),
            "amp":actionType.reduce(58),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(58),
            "dcolon":actionType.reduce(58),
            "colon":actionType.reduce(58),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(58),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(58),
            "dotdot":actionType.reduce(58),
            "dot":actionType.reduce(58),
            "mid":actionType.reduce(58),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(58),
            "$":actionType.reduce(58)
            },
        16:{
            "lapp":actionType.reduce(64),
            "rapp":actionType.reduce(64),
            "rarr":actionType.reduce(64),
            "sleft":actionType.reduce(64),
            "sright":actionType.reduce(64),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(64),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(64),
            "rpar":actionType.reduce(64),
            "rbracket":actionType.reduce(64),
            "plus":actionType.reduce(64),
            "minus":actionType.reduce(64),
            "power":actionType.reduce(64),
            "divide":actionType.reduce(64),
            "modulo":actionType.reduce(64),
            "times":actionType.reduce(64),
            "eq":actionType.reduce(64),
            "not-eq":actionType.reduce(64),
            "geq":actionType.reduce(64),
            "leq":actionType.reduce(64),
            "gt":actionType.reduce(64),
            "lt":actionType.reduce(64),
            "and":actionType.reduce(64),
            "or":actionType.reduce(64),
            "imp":actionType.reduce(64),
            "biimp":actionType.reduce(64),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(64),
            "up":actionType.reduce(64),
            "amp":actionType.reduce(64),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(64),
            "dcolon":actionType.reduce(64),
            "colon":actionType.reduce(64),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(64),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(64),
            "dotdot":actionType.reduce(64),
            "dot":actionType.reduce(64),
            "mid":actionType.reduce(64),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(64),
            "$":actionType.reduce(64)
            },
        17:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.reduce(91),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.reduce(91),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given '$'")
            },
        18:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.reduce(91),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.reduce(91),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','rbracketm','string','type-id','uscore', but given '$'")
            },
        19:{
            "lapp":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'id','parenthese','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'id','parenthese','uscore', but given 'sright'"),
            "lbracketm":actionType.error("expected 'id','parenthese','uscore', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'id','parenthese','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(67),
            "lbracket":actionType.error("expected 'id','parenthese','uscore', but given 'parenthese'"),
            "rpar":actionType.error("expected 'id','parenthese','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'id','parenthese','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "power":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "times":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "and":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "or":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "not":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'id','parenthese','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'id','parenthese','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'id','parenthese','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'id','parenthese','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'id','parenthese','uscore', but given 'colon'"),
            "let":actionType.error("expected 'id','parenthese','uscore', but given 'let'"),
            "type":actionType.error("expected 'id','parenthese','uscore', but given 'type'"),
            "assign":actionType.error("expected 'id','parenthese','uscore', but given 'assign'"),
            "match":actionType.error("expected 'id','parenthese','uscore', but given 'match'"),
            "with":actionType.error("expected 'id','parenthese','uscore', but given 'with'"),
            "block":actionType.error("expected 'id','parenthese','uscore', but given 'block'"),
            "of":actionType.error("expected 'id','parenthese','uscore', but given 'of'"),
            "hex":actionType.error("expected 'id','parenthese','uscore', but given 'hex'"),
            "binary":actionType.error("expected 'id','parenthese','uscore', but given 'binary'"),
            "float":actionType.error("expected 'id','parenthese','uscore', but given 'float'"),
            "int":actionType.error("expected 'id','parenthese','uscore', but given 'int'"),
            "string":actionType.error("expected 'id','parenthese','uscore', but given 'string'"),
            "bool":actionType.error("expected 'id','parenthese','uscore', but given 'bool'"),
            "type-id":actionType.error("expected 'id','parenthese','uscore', but given 'type-id'"),
            "id":actionType.shift(66),
            "comma":actionType.error("expected 'id','parenthese','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'id','parenthese','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'id','parenthese','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'id','parenthese','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(68),
            "qmark":actionType.error("expected 'id','parenthese','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'id','parenthese','uscore', but given '$'")
            },
        20:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.reduce(50),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        21:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        22:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        23:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        24:{
            "lapp":actionType.reduce(59),
            "rapp":actionType.reduce(59),
            "rarr":actionType.reduce(59),
            "sleft":actionType.reduce(59),
            "sright":actionType.reduce(59),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(59),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(59),
            "rpar":actionType.reduce(59),
            "rbracket":actionType.reduce(59),
            "plus":actionType.reduce(59),
            "minus":actionType.reduce(59),
            "power":actionType.reduce(59),
            "divide":actionType.reduce(59),
            "modulo":actionType.reduce(59),
            "times":actionType.reduce(59),
            "eq":actionType.reduce(59),
            "not-eq":actionType.reduce(59),
            "geq":actionType.reduce(59),
            "leq":actionType.reduce(59),
            "gt":actionType.reduce(59),
            "lt":actionType.reduce(59),
            "and":actionType.reduce(59),
            "or":actionType.reduce(59),
            "imp":actionType.reduce(59),
            "biimp":actionType.reduce(59),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(59),
            "up":actionType.reduce(59),
            "amp":actionType.reduce(59),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(59),
            "dcolon":actionType.reduce(59),
            "colon":actionType.reduce(59),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(59),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(59),
            "dotdot":actionType.reduce(59),
            "dot":actionType.reduce(59),
            "mid":actionType.reduce(59),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(59),
            "$":actionType.reduce(59)
            },
        25:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        26:{
            "lapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'type-id', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'type-id', but given 'operator'"),
            "minus":actionType.error("expected 'type-id', but given 'operator'"),
            "power":actionType.error("expected 'type-id', but given 'operator'"),
            "divide":actionType.error("expected 'type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'type-id', but given 'operator'"),
            "times":actionType.error("expected 'type-id', but given 'operator'"),
            "eq":actionType.error("expected 'type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'type-id', but given 'operator'"),
            "geq":actionType.error("expected 'type-id', but given 'operator'"),
            "leq":actionType.error("expected 'type-id', but given 'operator'"),
            "gt":actionType.error("expected 'type-id', but given 'operator'"),
            "lt":actionType.error("expected 'type-id', but given 'operator'"),
            "and":actionType.error("expected 'type-id', but given 'operator'"),
            "or":actionType.error("expected 'type-id', but given 'operator'"),
            "imp":actionType.error("expected 'type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'type-id', but given 'operator'"),
            "not":actionType.error("expected 'type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'type-id', but given 'bslash'"),
            "up":actionType.error("expected 'type-id', but given 'operator'"),
            "amp":actionType.error("expected 'type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'type-id', but given 'colon'"),
            "let":actionType.error("expected 'type-id', but given 'let'"),
            "type":actionType.error("expected 'type-id', but given 'type'"),
            "assign":actionType.error("expected 'type-id', but given 'assign'"),
            "match":actionType.error("expected 'type-id', but given 'match'"),
            "with":actionType.error("expected 'type-id', but given 'with'"),
            "block":actionType.error("expected 'type-id', but given 'block'"),
            "of":actionType.error("expected 'type-id', but given 'of'"),
            "hex":actionType.error("expected 'type-id', but given 'hex'"),
            "binary":actionType.error("expected 'type-id', but given 'binary'"),
            "float":actionType.error("expected 'type-id', but given 'float'"),
            "int":actionType.error("expected 'type-id', but given 'int'"),
            "string":actionType.error("expected 'type-id', but given 'string'"),
            "bool":actionType.error("expected 'type-id', but given 'bool'"),
            "type-id":actionType.shift(75),
            "id":actionType.error("expected 'type-id', but given 'id'"),
            "comma":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'type-id', but given 'qmark'"),
            "$":actionType.error("expected 'type-id', but given '$'")
            },
        27:{
            "lapp":actionType.reduce(75),
            "rapp":actionType.reduce(75),
            "rarr":actionType.reduce(75),
            "sleft":actionType.reduce(75),
            "sright":actionType.reduce(75),
            "lbracketm":actionType.reduce(75),
            "rbracketm":actionType.reduce(75),
            "lpar":actionType.reduce(75),
            "lbracket":actionType.reduce(75),
            "rpar":actionType.reduce(75),
            "rbracket":actionType.reduce(75),
            "plus":actionType.reduce(75),
            "minus":actionType.reduce(75),
            "power":actionType.reduce(75),
            "divide":actionType.reduce(75),
            "modulo":actionType.reduce(75),
            "times":actionType.reduce(75),
            "eq":actionType.reduce(75),
            "not-eq":actionType.reduce(75),
            "geq":actionType.reduce(75),
            "leq":actionType.reduce(75),
            "gt":actionType.reduce(75),
            "lt":actionType.reduce(75),
            "and":actionType.reduce(75),
            "or":actionType.reduce(75),
            "imp":actionType.reduce(75),
            "biimp":actionType.reduce(75),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(75),
            "up":actionType.reduce(75),
            "amp":actionType.reduce(75),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(75),
            "dcolon":actionType.reduce(75),
            "colon":actionType.reduce(75),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(75),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(75),
            "binary":actionType.reduce(75),
            "float":actionType.reduce(75),
            "int":actionType.reduce(75),
            "string":actionType.reduce(75),
            "bool":actionType.reduce(75),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(75),
            "comma":actionType.reduce(75),
            "dotdot":actionType.reduce(75),
            "dot":actionType.shift(77),
            "mid":actionType.reduce(75),
            "uscore":actionType.reduce(75),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(75)
            },
        28:{
            "lapp":actionType.reduce(57),
            "rapp":actionType.reduce(57),
            "rarr":actionType.reduce(57),
            "sleft":actionType.reduce(57),
            "sright":actionType.reduce(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(57),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(57),
            "rpar":actionType.reduce(57),
            "rbracket":actionType.reduce(57),
            "plus":actionType.reduce(57),
            "minus":actionType.reduce(57),
            "power":actionType.reduce(57),
            "divide":actionType.reduce(57),
            "modulo":actionType.reduce(57),
            "times":actionType.reduce(57),
            "eq":actionType.reduce(57),
            "not-eq":actionType.reduce(57),
            "geq":actionType.reduce(57),
            "leq":actionType.reduce(57),
            "gt":actionType.reduce(57),
            "lt":actionType.reduce(57),
            "and":actionType.reduce(57),
            "or":actionType.reduce(57),
            "imp":actionType.reduce(57),
            "biimp":actionType.reduce(57),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(57),
            "up":actionType.reduce(57),
            "amp":actionType.reduce(57),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(57),
            "dcolon":actionType.reduce(57),
            "colon":actionType.reduce(57),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(57),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(57),
            "dotdot":actionType.reduce(57),
            "dot":actionType.reduce(57),
            "mid":actionType.reduce(57),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(57),
            "$":actionType.reduce(57)
            },
        29:{
            "lapp":actionType.reduce(54),
            "rapp":actionType.reduce(54),
            "rarr":actionType.reduce(54),
            "sleft":actionType.reduce(54),
            "sright":actionType.reduce(54),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(54),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(54),
            "rbracket":actionType.reduce(54),
            "plus":actionType.reduce(54),
            "minus":actionType.reduce(54),
            "power":actionType.reduce(54),
            "divide":actionType.reduce(54),
            "modulo":actionType.reduce(54),
            "times":actionType.reduce(54),
            "eq":actionType.reduce(54),
            "not-eq":actionType.reduce(54),
            "geq":actionType.reduce(54),
            "leq":actionType.reduce(54),
            "gt":actionType.reduce(54),
            "lt":actionType.reduce(54),
            "and":actionType.reduce(54),
            "or":actionType.reduce(54),
            "imp":actionType.reduce(54),
            "biimp":actionType.reduce(54),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(54),
            "up":actionType.reduce(54),
            "amp":actionType.reduce(54),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(54),
            "dcolon":actionType.reduce(54),
            "colon":actionType.reduce(54),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(54),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(54),
            "dotdot":actionType.reduce(54),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(54),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(54),
            "$":actionType.reduce(54)
            },
        30:{
            "lapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "power":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'assign'"),
            "match":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'match'"),
            "with":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'with'"),
            "block":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'block'"),
            "of":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type-id'"),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given '$'")
            },
        31:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        32:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'colon'"),
            "let":actionType.shift(19),
            "type":actionType.shift(26),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given '$'")
            },
        33:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        34:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        35:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        36:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        37:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        38:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        39:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        40:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        41:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        42:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        43:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        44:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        45:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        46:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        47:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        48:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        49:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        50:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        51:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        52:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        53:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        54:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        55:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        56:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        57:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        58:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        59:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        60:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.shift(108),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        61:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(93),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "rbracket":actionType.reduce(93),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'operator'"),
            "scolon":actionType.shift(110),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given '$'")
            },
        62:{
            "lapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rbracket":actionType.shift(111),
            "plus":actionType.error("expected 'parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese', but given 'operator'"),
            "power":actionType.error("expected 'parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese', but given 'operator'"),
            "times":actionType.error("expected 'parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese', but given 'operator'"),
            "and":actionType.error("expected 'parenthese', but given 'operator'"),
            "or":actionType.error("expected 'parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese', but given 'operator'"),
            "not":actionType.error("expected 'parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese', but given 'colon'"),
            "let":actionType.error("expected 'parenthese', but given 'let'"),
            "type":actionType.error("expected 'parenthese', but given 'type'"),
            "assign":actionType.error("expected 'parenthese', but given 'assign'"),
            "match":actionType.error("expected 'parenthese', but given 'match'"),
            "with":actionType.error("expected 'parenthese', but given 'with'"),
            "block":actionType.error("expected 'parenthese', but given 'block'"),
            "of":actionType.error("expected 'parenthese', but given 'of'"),
            "hex":actionType.error("expected 'parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese', but given 'binary'"),
            "float":actionType.error("expected 'parenthese', but given 'float'"),
            "int":actionType.error("expected 'parenthese', but given 'int'"),
            "string":actionType.error("expected 'parenthese', but given 'string'"),
            "bool":actionType.error("expected 'parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese', but given 'id'"),
            "comma":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese', but given '$'")
            },
        63:{
            "lapp":actionType.error("expected 'rbracketm', but given 'operator'"),
            "rapp":actionType.error("expected 'rbracketm', but given 'operator'"),
            "rarr":actionType.error("expected 'rbracketm', but given 'operator'"),
            "sleft":actionType.error("expected 'rbracketm', but given 'sleft'"),
            "sright":actionType.error("expected 'rbracketm', but given 'sright'"),
            "lbracketm":actionType.error("expected 'rbracketm', but given 'lbracketm'"),
            "rbracketm":actionType.shift(112),
            "lpar":actionType.error("expected 'rbracketm', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'rbracketm', but given 'parenthese'"),
            "rpar":actionType.error("expected 'rbracketm', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'rbracketm', but given 'parenthese'"),
            "plus":actionType.error("expected 'rbracketm', but given 'operator'"),
            "minus":actionType.error("expected 'rbracketm', but given 'operator'"),
            "power":actionType.error("expected 'rbracketm', but given 'operator'"),
            "divide":actionType.error("expected 'rbracketm', but given 'operator'"),
            "modulo":actionType.error("expected 'rbracketm', but given 'operator'"),
            "times":actionType.error("expected 'rbracketm', but given 'operator'"),
            "eq":actionType.error("expected 'rbracketm', but given 'operator'"),
            "not-eq":actionType.error("expected 'rbracketm', but given 'operator'"),
            "geq":actionType.error("expected 'rbracketm', but given 'operator'"),
            "leq":actionType.error("expected 'rbracketm', but given 'operator'"),
            "gt":actionType.error("expected 'rbracketm', but given 'operator'"),
            "lt":actionType.error("expected 'rbracketm', but given 'operator'"),
            "and":actionType.error("expected 'rbracketm', but given 'operator'"),
            "or":actionType.error("expected 'rbracketm', but given 'operator'"),
            "imp":actionType.error("expected 'rbracketm', but given 'operator'"),
            "biimp":actionType.error("expected 'rbracketm', but given 'operator'"),
            "not":actionType.error("expected 'rbracketm', but given 'operator'"),
            "bslash":actionType.error("expected 'rbracketm', but given 'bslash'"),
            "up":actionType.error("expected 'rbracketm', but given 'operator'"),
            "amp":actionType.error("expected 'rbracketm', but given 'operator'"),
            "tilde":actionType.error("expected 'rbracketm', but given 'operator'"),
            "scolon":actionType.error("expected 'rbracketm', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'rbracketm', but given 'dcolon'"),
            "colon":actionType.error("expected 'rbracketm', but given 'colon'"),
            "let":actionType.error("expected 'rbracketm', but given 'let'"),
            "type":actionType.error("expected 'rbracketm', but given 'type'"),
            "assign":actionType.error("expected 'rbracketm', but given 'assign'"),
            "match":actionType.error("expected 'rbracketm', but given 'match'"),
            "with":actionType.error("expected 'rbracketm', but given 'with'"),
            "block":actionType.error("expected 'rbracketm', but given 'block'"),
            "of":actionType.error("expected 'rbracketm', but given 'of'"),
            "hex":actionType.error("expected 'rbracketm', but given 'hex'"),
            "binary":actionType.error("expected 'rbracketm', but given 'binary'"),
            "float":actionType.error("expected 'rbracketm', but given 'float'"),
            "int":actionType.error("expected 'rbracketm', but given 'int'"),
            "string":actionType.error("expected 'rbracketm', but given 'string'"),
            "bool":actionType.error("expected 'rbracketm', but given 'bool'"),
            "type-id":actionType.error("expected 'rbracketm', but given 'type-id'"),
            "id":actionType.error("expected 'rbracketm', but given 'id'"),
            "comma":actionType.error("expected 'rbracketm', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'rbracketm', but given 'dotdot'"),
            "dot":actionType.error("expected 'rbracketm', but given 'delimiter'"),
            "mid":actionType.error("expected 'rbracketm', but given 'delimiter'"),
            "uscore":actionType.error("expected 'rbracketm', but given 'uscore'"),
            "qmark":actionType.error("expected 'rbracketm', but given 'qmark'"),
            "$":actionType.error("expected 'rbracketm', but given '$'")
            },
        64:{
            "lapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','delimiter','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','delimiter','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(70),
            "rbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','delimiter','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','delimiter','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','delimiter','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','delimiter','parenthese', but given 'type'"),
            "assign":actionType.reduce(70),
            "match":actionType.error("expected 'assign','delimiter','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','delimiter','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','delimiter','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','delimiter','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','delimiter','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','delimiter','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','delimiter','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','delimiter','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','delimiter','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','delimiter','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','delimiter','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','delimiter','parenthese', but given 'id'"),
            "comma":actionType.shift(114),
            "dotdot":actionType.error("expected 'assign','delimiter','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','delimiter','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','delimiter','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','delimiter','parenthese', but given '$'")
            },
        65:{
            "lapp":actionType.error("expected 'assign', but given 'operator'"),
            "rapp":actionType.error("expected 'assign', but given 'operator'"),
            "rarr":actionType.error("expected 'assign', but given 'operator'"),
            "sleft":actionType.error("expected 'assign', but given 'sleft'"),
            "sright":actionType.error("expected 'assign', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "rpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign', but given 'operator'"),
            "minus":actionType.error("expected 'assign', but given 'operator'"),
            "power":actionType.error("expected 'assign', but given 'operator'"),
            "divide":actionType.error("expected 'assign', but given 'operator'"),
            "modulo":actionType.error("expected 'assign', but given 'operator'"),
            "times":actionType.error("expected 'assign', but given 'operator'"),
            "eq":actionType.error("expected 'assign', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign', but given 'operator'"),
            "geq":actionType.error("expected 'assign', but given 'operator'"),
            "leq":actionType.error("expected 'assign', but given 'operator'"),
            "gt":actionType.error("expected 'assign', but given 'operator'"),
            "lt":actionType.error("expected 'assign', but given 'operator'"),
            "and":actionType.error("expected 'assign', but given 'operator'"),
            "or":actionType.error("expected 'assign', but given 'operator'"),
            "imp":actionType.error("expected 'assign', but given 'operator'"),
            "biimp":actionType.error("expected 'assign', but given 'operator'"),
            "not":actionType.error("expected 'assign', but given 'operator'"),
            "bslash":actionType.error("expected 'assign', but given 'bslash'"),
            "up":actionType.error("expected 'assign', but given 'operator'"),
            "amp":actionType.error("expected 'assign', but given 'operator'"),
            "tilde":actionType.error("expected 'assign', but given 'operator'"),
            "scolon":actionType.error("expected 'assign', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign', but given 'colon'"),
            "let":actionType.error("expected 'assign', but given 'let'"),
            "type":actionType.error("expected 'assign', but given 'type'"),
            "assign":actionType.shift(115),
            "match":actionType.error("expected 'assign', but given 'match'"),
            "with":actionType.error("expected 'assign', but given 'with'"),
            "block":actionType.error("expected 'assign', but given 'block'"),
            "of":actionType.error("expected 'assign', but given 'of'"),
            "hex":actionType.error("expected 'assign', but given 'hex'"),
            "binary":actionType.error("expected 'assign', but given 'binary'"),
            "float":actionType.error("expected 'assign', but given 'float'"),
            "int":actionType.error("expected 'assign', but given 'int'"),
            "string":actionType.error("expected 'assign', but given 'string'"),
            "bool":actionType.error("expected 'assign', but given 'bool'"),
            "type-id":actionType.error("expected 'assign', but given 'type-id'"),
            "id":actionType.error("expected 'assign', but given 'id'"),
            "comma":actionType.error("expected 'assign', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'assign', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign', but given 'qmark'"),
            "$":actionType.error("expected 'assign', but given '$'")
            },
        66:{
            "lapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','delimiter','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','delimiter','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(73),
            "rbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','delimiter','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','delimiter','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','delimiter','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','delimiter','parenthese', but given 'type'"),
            "assign":actionType.reduce(73),
            "match":actionType.error("expected 'assign','delimiter','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','delimiter','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','delimiter','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','delimiter','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','delimiter','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','delimiter','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','delimiter','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','delimiter','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','delimiter','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','delimiter','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','delimiter','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','delimiter','parenthese', but given 'id'"),
            "comma":actionType.reduce(73),
            "dotdot":actionType.error("expected 'assign','delimiter','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','delimiter','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','delimiter','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','delimiter','parenthese', but given '$'")
            },
        67:{
            "lapp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'id','uscore', but given 'sright'"),
            "lbracketm":actionType.error("expected 'id','uscore', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'id','uscore', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "rpar":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'id','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'id','uscore', but given 'operator'"),
            "power":actionType.error("expected 'id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "not":actionType.error("expected 'id','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'id','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'id','uscore', but given 'let'"),
            "type":actionType.error("expected 'id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'id','uscore', but given 'assign'"),
            "match":actionType.error("expected 'id','uscore', but given 'match'"),
            "with":actionType.error("expected 'id','uscore', but given 'with'"),
            "block":actionType.error("expected 'id','uscore', but given 'block'"),
            "of":actionType.error("expected 'id','uscore', but given 'of'"),
            "hex":actionType.error("expected 'id','uscore', but given 'hex'"),
            "binary":actionType.error("expected 'id','uscore', but given 'binary'"),
            "float":actionType.error("expected 'id','uscore', but given 'float'"),
            "int":actionType.error("expected 'id','uscore', but given 'int'"),
            "string":actionType.error("expected 'id','uscore', but given 'string'"),
            "bool":actionType.error("expected 'id','uscore', but given 'bool'"),
            "type-id":actionType.error("expected 'id','uscore', but given 'type-id'"),
            "id":actionType.shift(66),
            "comma":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(68),
            "qmark":actionType.error("expected 'id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'id','uscore', but given '$'")
            },
        68:{
            "lapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','delimiter','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','delimiter','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(72),
            "rbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','delimiter','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','delimiter','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','delimiter','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','delimiter','parenthese', but given 'type'"),
            "assign":actionType.reduce(72),
            "match":actionType.error("expected 'assign','delimiter','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','delimiter','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','delimiter','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','delimiter','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','delimiter','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','delimiter','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','delimiter','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','delimiter','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','delimiter','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','delimiter','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','delimiter','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','delimiter','parenthese', but given 'id'"),
            "comma":actionType.reduce(72),
            "dotdot":actionType.error("expected 'assign','delimiter','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','delimiter','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','delimiter','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','delimiter','parenthese', but given '$'")
            },
        69:{
            "lapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rpar":actionType.shift(117),
            "rbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese', but given 'operator'"),
            "power":actionType.error("expected 'parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese', but given 'operator'"),
            "times":actionType.error("expected 'parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese', but given 'operator'"),
            "and":actionType.error("expected 'parenthese', but given 'operator'"),
            "or":actionType.error("expected 'parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese', but given 'operator'"),
            "not":actionType.error("expected 'parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese', but given 'colon'"),
            "let":actionType.error("expected 'parenthese', but given 'let'"),
            "type":actionType.error("expected 'parenthese', but given 'type'"),
            "assign":actionType.error("expected 'parenthese', but given 'assign'"),
            "match":actionType.error("expected 'parenthese', but given 'match'"),
            "with":actionType.error("expected 'parenthese', but given 'with'"),
            "block":actionType.error("expected 'parenthese', but given 'block'"),
            "of":actionType.error("expected 'parenthese', but given 'of'"),
            "hex":actionType.error("expected 'parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese', but given 'binary'"),
            "float":actionType.error("expected 'parenthese', but given 'float'"),
            "int":actionType.error("expected 'parenthese', but given 'int'"),
            "string":actionType.error("expected 'parenthese', but given 'string'"),
            "bool":actionType.error("expected 'parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese', but given 'id'"),
            "comma":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese', but given '$'")
            },
        70:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.reduce(52),
            "rbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'id'"),
            "comma":actionType.shift(119),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given '$'")
            },
        71:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'parenthese'"),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'delimiter'"),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'match'"),
            "with":actionType.shift(120),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright','with', but given '$'")
            },
        72:{
            "lapp":actionType.reduce(20),
            "rapp":actionType.reduce(20),
            "rarr":actionType.reduce(20),
            "sleft":actionType.reduce(20),
            "sright":actionType.reduce(20),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(20),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(20),
            "rbracket":actionType.reduce(20),
            "plus":actionType.reduce(20),
            "minus":actionType.reduce(20),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(20),
            "not-eq":actionType.reduce(20),
            "geq":actionType.reduce(20),
            "leq":actionType.reduce(20),
            "gt":actionType.reduce(20),
            "lt":actionType.reduce(20),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(20),
            "up":actionType.reduce(20),
            "amp":actionType.reduce(20),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(20),
            "dcolon":actionType.reduce(20),
            "colon":actionType.reduce(20),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(20),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(20),
            "dotdot":actionType.reduce(20),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(20),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(20)
            },
        73:{
            "lapp":actionType.reduce(25),
            "rapp":actionType.reduce(25),
            "rarr":actionType.reduce(25),
            "sleft":actionType.reduce(25),
            "sright":actionType.reduce(25),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(25),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(25),
            "rbracket":actionType.reduce(25),
            "plus":actionType.reduce(25),
            "minus":actionType.reduce(25),
            "power":actionType.reduce(25),
            "divide":actionType.reduce(25),
            "modulo":actionType.reduce(25),
            "times":actionType.reduce(25),
            "eq":actionType.reduce(25),
            "not-eq":actionType.reduce(25),
            "geq":actionType.reduce(25),
            "leq":actionType.reduce(25),
            "gt":actionType.reduce(25),
            "lt":actionType.reduce(25),
            "and":actionType.reduce(25),
            "or":actionType.reduce(25),
            "imp":actionType.reduce(25),
            "biimp":actionType.reduce(25),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(25),
            "up":actionType.reduce(25),
            "amp":actionType.reduce(25),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(25),
            "dcolon":actionType.reduce(25),
            "colon":actionType.reduce(25),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(25),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(25),
            "dotdot":actionType.reduce(25),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(25),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(25)
            },
        74:{
            "lapp":actionType.reduce(31),
            "rapp":actionType.reduce(31),
            "rarr":actionType.reduce(31),
            "sleft":actionType.reduce(31),
            "sright":actionType.reduce(31),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(31),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(31),
            "rbracket":actionType.reduce(31),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(31),
            "not-eq":actionType.reduce(31),
            "geq":actionType.reduce(31),
            "leq":actionType.reduce(31),
            "gt":actionType.reduce(31),
            "lt":actionType.reduce(31),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(31),
            "up":actionType.reduce(31),
            "amp":actionType.reduce(31),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(31),
            "dcolon":actionType.reduce(31),
            "colon":actionType.reduce(31),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(31),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(31),
            "dotdot":actionType.reduce(31),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(31),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(31)
            },
        75:{
            "lapp":actionType.error("expected 'assign', but given 'operator'"),
            "rapp":actionType.error("expected 'assign', but given 'operator'"),
            "rarr":actionType.error("expected 'assign', but given 'operator'"),
            "sleft":actionType.error("expected 'assign', but given 'sleft'"),
            "sright":actionType.error("expected 'assign', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "rpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign', but given 'operator'"),
            "minus":actionType.error("expected 'assign', but given 'operator'"),
            "power":actionType.error("expected 'assign', but given 'operator'"),
            "divide":actionType.error("expected 'assign', but given 'operator'"),
            "modulo":actionType.error("expected 'assign', but given 'operator'"),
            "times":actionType.error("expected 'assign', but given 'operator'"),
            "eq":actionType.error("expected 'assign', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign', but given 'operator'"),
            "geq":actionType.error("expected 'assign', but given 'operator'"),
            "leq":actionType.error("expected 'assign', but given 'operator'"),
            "gt":actionType.error("expected 'assign', but given 'operator'"),
            "lt":actionType.error("expected 'assign', but given 'operator'"),
            "and":actionType.error("expected 'assign', but given 'operator'"),
            "or":actionType.error("expected 'assign', but given 'operator'"),
            "imp":actionType.error("expected 'assign', but given 'operator'"),
            "biimp":actionType.error("expected 'assign', but given 'operator'"),
            "not":actionType.error("expected 'assign', but given 'operator'"),
            "bslash":actionType.error("expected 'assign', but given 'bslash'"),
            "up":actionType.error("expected 'assign', but given 'operator'"),
            "amp":actionType.error("expected 'assign', but given 'operator'"),
            "tilde":actionType.error("expected 'assign', but given 'operator'"),
            "scolon":actionType.error("expected 'assign', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign', but given 'colon'"),
            "let":actionType.error("expected 'assign', but given 'let'"),
            "type":actionType.error("expected 'assign', but given 'type'"),
            "assign":actionType.shift(121),
            "match":actionType.error("expected 'assign', but given 'match'"),
            "with":actionType.error("expected 'assign', but given 'with'"),
            "block":actionType.error("expected 'assign', but given 'block'"),
            "of":actionType.error("expected 'assign', but given 'of'"),
            "hex":actionType.error("expected 'assign', but given 'hex'"),
            "binary":actionType.error("expected 'assign', but given 'binary'"),
            "float":actionType.error("expected 'assign', but given 'float'"),
            "int":actionType.error("expected 'assign', but given 'int'"),
            "string":actionType.error("expected 'assign', but given 'string'"),
            "bool":actionType.error("expected 'assign', but given 'bool'"),
            "type-id":actionType.error("expected 'assign', but given 'type-id'"),
            "id":actionType.error("expected 'assign', but given 'id'"),
            "comma":actionType.error("expected 'assign', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'assign', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign', but given 'qmark'"),
            "$":actionType.error("expected 'assign', but given '$'")
            },
        76:{
            "lapp":actionType.reduce(74),
            "rapp":actionType.reduce(74),
            "rarr":actionType.reduce(74),
            "sleft":actionType.reduce(74),
            "sright":actionType.reduce(74),
            "lbracketm":actionType.reduce(74),
            "rbracketm":actionType.reduce(74),
            "lpar":actionType.reduce(74),
            "lbracket":actionType.reduce(74),
            "rpar":actionType.reduce(74),
            "rbracket":actionType.reduce(74),
            "plus":actionType.reduce(74),
            "minus":actionType.reduce(74),
            "power":actionType.reduce(74),
            "divide":actionType.reduce(74),
            "modulo":actionType.reduce(74),
            "times":actionType.reduce(74),
            "eq":actionType.reduce(74),
            "not-eq":actionType.reduce(74),
            "geq":actionType.reduce(74),
            "leq":actionType.reduce(74),
            "gt":actionType.reduce(74),
            "lt":actionType.reduce(74),
            "and":actionType.reduce(74),
            "or":actionType.reduce(74),
            "imp":actionType.reduce(74),
            "biimp":actionType.reduce(74),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(74),
            "up":actionType.reduce(74),
            "amp":actionType.reduce(74),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(74),
            "dcolon":actionType.reduce(74),
            "colon":actionType.reduce(74),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(74),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(74),
            "binary":actionType.reduce(74),
            "float":actionType.reduce(74),
            "int":actionType.reduce(74),
            "string":actionType.reduce(74),
            "bool":actionType.reduce(74),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(74),
            "comma":actionType.reduce(74),
            "dotdot":actionType.reduce(74),
            "dot":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(74),
            "uscore":actionType.reduce(74),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(74)
            },
        77:{
            "lapp":actionType.error("expected 'id','type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'id','type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'id','type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'id','type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'id','type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'id','type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'id','type-id', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'id','type-id', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'id','type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'id','type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'id','type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'id','type-id', but given 'operator'"),
            "minus":actionType.error("expected 'id','type-id', but given 'operator'"),
            "power":actionType.error("expected 'id','type-id', but given 'operator'"),
            "divide":actionType.error("expected 'id','type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'id','type-id', but given 'operator'"),
            "times":actionType.error("expected 'id','type-id', but given 'operator'"),
            "eq":actionType.error("expected 'id','type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'id','type-id', but given 'operator'"),
            "geq":actionType.error("expected 'id','type-id', but given 'operator'"),
            "leq":actionType.error("expected 'id','type-id', but given 'operator'"),
            "gt":actionType.error("expected 'id','type-id', but given 'operator'"),
            "lt":actionType.error("expected 'id','type-id', but given 'operator'"),
            "and":actionType.error("expected 'id','type-id', but given 'operator'"),
            "or":actionType.error("expected 'id','type-id', but given 'operator'"),
            "imp":actionType.error("expected 'id','type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'id','type-id', but given 'operator'"),
            "not":actionType.error("expected 'id','type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'id','type-id', but given 'bslash'"),
            "up":actionType.error("expected 'id','type-id', but given 'operator'"),
            "amp":actionType.error("expected 'id','type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'id','type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'id','type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'id','type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'id','type-id', but given 'colon'"),
            "let":actionType.error("expected 'id','type-id', but given 'let'"),
            "type":actionType.error("expected 'id','type-id', but given 'type'"),
            "assign":actionType.error("expected 'id','type-id', but given 'assign'"),
            "match":actionType.error("expected 'id','type-id', but given 'match'"),
            "with":actionType.error("expected 'id','type-id', but given 'with'"),
            "block":actionType.error("expected 'id','type-id', but given 'block'"),
            "of":actionType.error("expected 'id','type-id', but given 'of'"),
            "hex":actionType.error("expected 'id','type-id', but given 'hex'"),
            "binary":actionType.error("expected 'id','type-id', but given 'binary'"),
            "float":actionType.error("expected 'id','type-id', but given 'float'"),
            "int":actionType.error("expected 'id','type-id', but given 'int'"),
            "string":actionType.error("expected 'id','type-id', but given 'string'"),
            "bool":actionType.error("expected 'id','type-id', but given 'bool'"),
            "type-id":actionType.shift(124),
            "id":actionType.shift(123),
            "comma":actionType.error("expected 'id','type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'id','type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'id','type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'id','type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'id','type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'id','type-id', but given 'qmark'"),
            "$":actionType.error("expected 'id','type-id', but given '$'")
            },
        78:{
            "lapp":actionType.reduce(65),
            "rapp":actionType.reduce(65),
            "rarr":actionType.reduce(65),
            "sleft":actionType.reduce(65),
            "sright":actionType.reduce(65),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(65),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.shift(31),
            "rpar":actionType.reduce(65),
            "rbracket":actionType.reduce(65),
            "plus":actionType.reduce(65),
            "minus":actionType.reduce(65),
            "power":actionType.reduce(65),
            "divide":actionType.reduce(65),
            "modulo":actionType.reduce(65),
            "times":actionType.reduce(65),
            "eq":actionType.reduce(65),
            "not-eq":actionType.reduce(65),
            "geq":actionType.reduce(65),
            "leq":actionType.reduce(65),
            "gt":actionType.reduce(65),
            "lt":actionType.reduce(65),
            "and":actionType.reduce(65),
            "or":actionType.reduce(65),
            "imp":actionType.reduce(65),
            "biimp":actionType.reduce(65),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(65),
            "up":actionType.reduce(65),
            "amp":actionType.reduce(65),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(65),
            "dcolon":actionType.reduce(65),
            "colon":actionType.reduce(65),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(65),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(65),
            "dotdot":actionType.reduce(65),
            "dot":actionType.shift(30),
            "mid":actionType.reduce(65),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(65),
            "$":actionType.reduce(65)
            },
        79:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "rbracket":actionType.shift(126),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','sleft','sright', but given '$'")
            },
        80:{
            "lapp":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter','eoi', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','eoi', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','eoi', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','eoi', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter','eoi', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter','eoi', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "times":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','eoi', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','eoi', but given 'operator'"),
            "scolon":actionType.reduce(2),
            "dcolon":actionType.error("expected 'delimiter','eoi', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','eoi', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','eoi', but given 'let'"),
            "type":actionType.error("expected 'delimiter','eoi', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','eoi', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','eoi', but given 'match'"),
            "with":actionType.error("expected 'delimiter','eoi', but given 'with'"),
            "block":actionType.error("expected 'delimiter','eoi', but given 'block'"),
            "of":actionType.error("expected 'delimiter','eoi', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','eoi', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','eoi', but given 'float'"),
            "int":actionType.error("expected 'delimiter','eoi', but given 'int'"),
            "string":actionType.error("expected 'delimiter','eoi', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','eoi', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','eoi', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','eoi', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(2),
            "uscore":actionType.error("expected 'delimiter','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','eoi', but given 'qmark'"),
            "$":actionType.reduce(2)
            },
        81:{
            "lapp":actionType.reduce(28),
            "rapp":actionType.reduce(28),
            "rarr":actionType.reduce(28),
            "sleft":actionType.reduce(28),
            "sright":actionType.reduce(28),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(28),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(28),
            "rbracket":actionType.reduce(28),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(28),
            "not-eq":actionType.reduce(28),
            "geq":actionType.reduce(28),
            "leq":actionType.reduce(28),
            "gt":actionType.reduce(28),
            "lt":actionType.reduce(28),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.reduce(28),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(28),
            "dcolon":actionType.reduce(28),
            "colon":actionType.reduce(28),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(28),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(28),
            "dotdot":actionType.reduce(28),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(28),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(28)
            },
        82:{
            "lapp":actionType.reduce(21),
            "rapp":actionType.reduce(21),
            "rarr":actionType.reduce(21),
            "sleft":actionType.reduce(21),
            "sright":actionType.reduce(21),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(21),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(21),
            "rbracket":actionType.reduce(21),
            "plus":actionType.reduce(21),
            "minus":actionType.reduce(21),
            "power":actionType.reduce(21),
            "divide":actionType.reduce(21),
            "modulo":actionType.reduce(21),
            "times":actionType.reduce(21),
            "eq":actionType.reduce(21),
            "not-eq":actionType.reduce(21),
            "geq":actionType.reduce(21),
            "leq":actionType.reduce(21),
            "gt":actionType.reduce(21),
            "lt":actionType.reduce(21),
            "and":actionType.reduce(21),
            "or":actionType.reduce(21),
            "imp":actionType.reduce(21),
            "biimp":actionType.reduce(21),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(21),
            "up":actionType.reduce(21),
            "amp":actionType.reduce(21),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(21),
            "dcolon":actionType.reduce(21),
            "colon":actionType.reduce(21),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(21),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(21),
            "dotdot":actionType.reduce(21),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(21),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(21)
            },
        83:{
            "lapp":actionType.reduce(24),
            "rapp":actionType.reduce(24),
            "rarr":actionType.reduce(24),
            "sleft":actionType.reduce(24),
            "sright":actionType.reduce(24),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(24),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(24),
            "rbracket":actionType.reduce(24),
            "plus":actionType.reduce(24),
            "minus":actionType.reduce(24),
            "power":actionType.reduce(24),
            "divide":actionType.reduce(24),
            "modulo":actionType.reduce(24),
            "times":actionType.reduce(24),
            "eq":actionType.reduce(24),
            "not-eq":actionType.reduce(24),
            "geq":actionType.reduce(24),
            "leq":actionType.reduce(24),
            "gt":actionType.reduce(24),
            "lt":actionType.reduce(24),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(24),
            "up":actionType.reduce(24),
            "amp":actionType.reduce(24),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(24),
            "dcolon":actionType.reduce(24),
            "colon":actionType.reduce(24),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(24),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(24),
            "dotdot":actionType.reduce(24),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(24),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(24)
            },
        84:{
            "lapp":actionType.reduce(27),
            "rapp":actionType.reduce(27),
            "rarr":actionType.reduce(27),
            "sleft":actionType.reduce(27),
            "sright":actionType.reduce(27),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(27),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(27),
            "rbracket":actionType.reduce(27),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(27),
            "not-eq":actionType.reduce(27),
            "geq":actionType.reduce(27),
            "leq":actionType.reduce(27),
            "gt":actionType.reduce(27),
            "lt":actionType.reduce(27),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(27),
            "up":actionType.reduce(27),
            "amp":actionType.reduce(27),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(27),
            "dcolon":actionType.reduce(27),
            "colon":actionType.reduce(27),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(27),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(27),
            "dotdot":actionType.reduce(27),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(27),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(27)
            },
        85:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(42),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(42),
            "rbracket":actionType.reduce(42),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(42),
            "dcolon":actionType.reduce(42),
            "colon":actionType.reduce(42),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(42),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(42),
            "dotdot":actionType.reduce(42),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(42),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(42)
            },
        86:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(43),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(43),
            "rbracket":actionType.reduce(43),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(43),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(43),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(43),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(43),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(43)
            },
        87:{
            "lapp":actionType.reduce(17),
            "rapp":actionType.reduce(17),
            "rarr":actionType.reduce(17),
            "sleft":actionType.reduce(17),
            "sright":actionType.reduce(17),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(17),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(17),
            "rbracket":actionType.reduce(17),
            "plus":actionType.reduce(17),
            "minus":actionType.reduce(17),
            "power":actionType.shift(53),
            "divide":actionType.reduce(17),
            "modulo":actionType.shift(49),
            "times":actionType.reduce(17),
            "eq":actionType.reduce(17),
            "not-eq":actionType.reduce(17),
            "geq":actionType.reduce(17),
            "leq":actionType.reduce(17),
            "gt":actionType.reduce(17),
            "lt":actionType.reduce(17),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(17),
            "up":actionType.reduce(17),
            "amp":actionType.reduce(17),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(17),
            "dcolon":actionType.reduce(17),
            "colon":actionType.reduce(17),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(17),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(17),
            "dotdot":actionType.reduce(17),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(17),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(17)
            },
        88:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(38),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(38),
            "rbracket":actionType.reduce(38),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(38),
            "dcolon":actionType.reduce(38),
            "colon":actionType.reduce(38),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(38),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(38),
            "dotdot":actionType.reduce(38),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(38),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(38)
            },
        89:{
            "lapp":actionType.reduce(32),
            "rapp":actionType.reduce(32),
            "rarr":actionType.reduce(32),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(32),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(32),
            "rbracket":actionType.reduce(32),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(32),
            "not-eq":actionType.reduce(32),
            "geq":actionType.reduce(32),
            "leq":actionType.reduce(32),
            "gt":actionType.reduce(32),
            "lt":actionType.reduce(32),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(32),
            "dcolon":actionType.reduce(32),
            "colon":actionType.reduce(32),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(32),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(32),
            "dotdot":actionType.reduce(32),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(32),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(32)
            },
        90:{
            "lapp":actionType.reduce(35),
            "rapp":actionType.reduce(35),
            "rarr":actionType.reduce(35),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(35),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(35),
            "rbracket":actionType.reduce(35),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(35),
            "not-eq":actionType.reduce(35),
            "geq":actionType.reduce(35),
            "leq":actionType.reduce(35),
            "gt":actionType.reduce(35),
            "lt":actionType.reduce(35),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(35),
            "dcolon":actionType.reduce(35),
            "colon":actionType.reduce(35),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(35),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(35),
            "dotdot":actionType.reduce(35),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(35),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(35)
            },
        91:{
            "lapp":actionType.reduce(34),
            "rapp":actionType.reduce(34),
            "rarr":actionType.reduce(34),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(34),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(34),
            "rbracket":actionType.reduce(34),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(34),
            "not-eq":actionType.reduce(34),
            "geq":actionType.reduce(34),
            "leq":actionType.reduce(34),
            "gt":actionType.reduce(34),
            "lt":actionType.reduce(34),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(34),
            "dcolon":actionType.reduce(34),
            "colon":actionType.reduce(34),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(34),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(34),
            "dotdot":actionType.reduce(34),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(34),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(34)
            },
        92:{
            "lapp":actionType.reduce(23),
            "rapp":actionType.reduce(23),
            "rarr":actionType.reduce(23),
            "sleft":actionType.reduce(23),
            "sright":actionType.reduce(23),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(23),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(23),
            "rbracket":actionType.reduce(23),
            "plus":actionType.reduce(23),
            "minus":actionType.reduce(23),
            "power":actionType.reduce(23),
            "divide":actionType.reduce(23),
            "modulo":actionType.reduce(23),
            "times":actionType.reduce(23),
            "eq":actionType.reduce(23),
            "not-eq":actionType.reduce(23),
            "geq":actionType.reduce(23),
            "leq":actionType.reduce(23),
            "gt":actionType.reduce(23),
            "lt":actionType.reduce(23),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.reduce(23),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(23),
            "up":actionType.reduce(23),
            "amp":actionType.reduce(23),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(23),
            "dcolon":actionType.reduce(23),
            "colon":actionType.reduce(23),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(23),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(23),
            "dotdot":actionType.reduce(23),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(23),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(23)
            },
        93:{
            "lapp":actionType.reduce(39),
            "rapp":actionType.reduce(39),
            "rarr":actionType.reduce(39),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(39),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(39),
            "rbracket":actionType.reduce(39),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(39),
            "dcolon":actionType.reduce(39),
            "colon":actionType.reduce(39),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(39),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(39),
            "dotdot":actionType.reduce(39),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(39),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(39)
            },
        94:{
            "lapp":actionType.reduce(37),
            "rapp":actionType.reduce(37),
            "rarr":actionType.reduce(37),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(37),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(37),
            "rbracket":actionType.reduce(37),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(37),
            "not-eq":actionType.reduce(37),
            "geq":actionType.reduce(37),
            "leq":actionType.reduce(37),
            "gt":actionType.reduce(37),
            "lt":actionType.reduce(37),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(37),
            "dcolon":actionType.reduce(37),
            "colon":actionType.reduce(37),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(37),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(37),
            "dotdot":actionType.reduce(37),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(37),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(37)
            },
        95:{
            "lapp":actionType.reduce(36),
            "rapp":actionType.reduce(36),
            "rarr":actionType.reduce(36),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(36),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(36),
            "rbracket":actionType.reduce(36),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(36),
            "not-eq":actionType.reduce(36),
            "geq":actionType.reduce(36),
            "leq":actionType.reduce(36),
            "gt":actionType.reduce(36),
            "lt":actionType.reduce(36),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(36),
            "dcolon":actionType.reduce(36),
            "colon":actionType.reduce(36),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(36),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(36),
            "dotdot":actionType.reduce(36),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(36),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(36)
            },
        96:{
            "lapp":actionType.reduce(15),
            "rapp":actionType.reduce(15),
            "rarr":actionType.reduce(15),
            "sleft":actionType.reduce(15),
            "sright":actionType.reduce(15),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(15),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(15),
            "rbracket":actionType.reduce(15),
            "plus":actionType.reduce(15),
            "minus":actionType.reduce(15),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(15),
            "not-eq":actionType.reduce(15),
            "geq":actionType.reduce(15),
            "leq":actionType.reduce(15),
            "gt":actionType.reduce(15),
            "lt":actionType.reduce(15),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(15),
            "up":actionType.reduce(15),
            "amp":actionType.reduce(15),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(15),
            "dcolon":actionType.reduce(15),
            "colon":actionType.reduce(15),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(15),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(15),
            "dotdot":actionType.reduce(15),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(15),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(15)
            },
        97:{
            "lapp":actionType.reduce(18),
            "rapp":actionType.reduce(18),
            "rarr":actionType.reduce(18),
            "sleft":actionType.reduce(18),
            "sright":actionType.reduce(18),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(18),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(18),
            "rbracket":actionType.reduce(18),
            "plus":actionType.reduce(18),
            "minus":actionType.reduce(18),
            "power":actionType.shift(53),
            "divide":actionType.reduce(18),
            "modulo":actionType.reduce(18),
            "times":actionType.reduce(18),
            "eq":actionType.reduce(18),
            "not-eq":actionType.reduce(18),
            "geq":actionType.reduce(18),
            "leq":actionType.reduce(18),
            "gt":actionType.reduce(18),
            "lt":actionType.reduce(18),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(18),
            "up":actionType.reduce(18),
            "amp":actionType.reduce(18),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(18),
            "dcolon":actionType.reduce(18),
            "colon":actionType.reduce(18),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(18),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(18),
            "dotdot":actionType.reduce(18),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(18),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(18)
            },
        98:{
            "lapp":actionType.reduce(33),
            "rapp":actionType.reduce(33),
            "rarr":actionType.reduce(33),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(33),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(33),
            "rbracket":actionType.reduce(33),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(33),
            "not-eq":actionType.reduce(33),
            "geq":actionType.reduce(33),
            "leq":actionType.reduce(33),
            "gt":actionType.reduce(33),
            "lt":actionType.reduce(33),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(33),
            "dcolon":actionType.reduce(33),
            "colon":actionType.reduce(33),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(33),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(33),
            "dotdot":actionType.reduce(33),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(33),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(33)
            },
        99:{
            "lapp":actionType.reduce(22),
            "rapp":actionType.reduce(22),
            "rarr":actionType.reduce(22),
            "sleft":actionType.reduce(22),
            "sright":actionType.reduce(22),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(22),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(22),
            "rbracket":actionType.reduce(22),
            "plus":actionType.reduce(22),
            "minus":actionType.reduce(22),
            "power":actionType.reduce(22),
            "divide":actionType.reduce(22),
            "modulo":actionType.reduce(22),
            "times":actionType.reduce(22),
            "eq":actionType.reduce(22),
            "not-eq":actionType.reduce(22),
            "geq":actionType.reduce(22),
            "leq":actionType.reduce(22),
            "gt":actionType.reduce(22),
            "lt":actionType.reduce(22),
            "and":actionType.shift(34),
            "or":actionType.reduce(22),
            "imp":actionType.reduce(22),
            "biimp":actionType.reduce(22),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(22),
            "up":actionType.reduce(22),
            "amp":actionType.reduce(22),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(22),
            "dcolon":actionType.reduce(22),
            "colon":actionType.reduce(22),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(22),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(22),
            "dotdot":actionType.reduce(22),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(22),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(22)
            },
        100:{
            "lapp":actionType.reduce(14),
            "rapp":actionType.reduce(14),
            "rarr":actionType.reduce(14),
            "sleft":actionType.reduce(14),
            "sright":actionType.reduce(14),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(14),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(14),
            "rbracket":actionType.reduce(14),
            "plus":actionType.reduce(14),
            "minus":actionType.reduce(14),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(14),
            "not-eq":actionType.reduce(14),
            "geq":actionType.reduce(14),
            "leq":actionType.reduce(14),
            "gt":actionType.reduce(14),
            "lt":actionType.reduce(14),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(14),
            "up":actionType.reduce(14),
            "amp":actionType.reduce(14),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(14),
            "dcolon":actionType.reduce(14),
            "colon":actionType.reduce(14),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(14),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(14),
            "dotdot":actionType.reduce(14),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(14),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(14)
            },
        101:{
            "lapp":actionType.reduce(19),
            "rapp":actionType.reduce(19),
            "rarr":actionType.reduce(19),
            "sleft":actionType.reduce(19),
            "sright":actionType.reduce(19),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(19),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(19),
            "rbracket":actionType.reduce(19),
            "plus":actionType.reduce(19),
            "minus":actionType.reduce(19),
            "power":actionType.shift(53),
            "divide":actionType.reduce(19),
            "modulo":actionType.reduce(19),
            "times":actionType.reduce(19),
            "eq":actionType.reduce(19),
            "not-eq":actionType.reduce(19),
            "geq":actionType.reduce(19),
            "leq":actionType.reduce(19),
            "gt":actionType.reduce(19),
            "lt":actionType.reduce(19),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(19),
            "up":actionType.reduce(19),
            "amp":actionType.reduce(19),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(19),
            "dcolon":actionType.reduce(19),
            "colon":actionType.reduce(19),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(19),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(19),
            "dotdot":actionType.reduce(19),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(19),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(19)
            },
        102:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.reduce(40),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(40),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(40),
            "rbracket":actionType.reduce(40),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(40),
            "dcolon":actionType.reduce(40),
            "colon":actionType.reduce(40),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(40),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(40),
            "dotdot":actionType.reduce(40),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(40),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(40)
            },
        103:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(41),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(41),
            "rbracket":actionType.reduce(41),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(41),
            "dcolon":actionType.reduce(41),
            "colon":actionType.reduce(41),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(41),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(41),
            "dotdot":actionType.reduce(41),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(41),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(41)
            },
        104:{
            "lapp":actionType.reduce(29),
            "rapp":actionType.reduce(29),
            "rarr":actionType.reduce(29),
            "sleft":actionType.reduce(29),
            "sright":actionType.reduce(29),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(29),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(29),
            "rbracket":actionType.reduce(29),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(29),
            "not-eq":actionType.reduce(29),
            "geq":actionType.reduce(29),
            "leq":actionType.reduce(29),
            "gt":actionType.reduce(29),
            "lt":actionType.reduce(29),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(29),
            "dcolon":actionType.reduce(29),
            "colon":actionType.reduce(29),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(29),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(29),
            "dotdot":actionType.reduce(29),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(29),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(29)
            },
        105:{
            "lapp":actionType.reduce(30),
            "rapp":actionType.reduce(30),
            "rarr":actionType.reduce(30),
            "sleft":actionType.reduce(30),
            "sright":actionType.reduce(30),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(30),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(30),
            "rbracket":actionType.reduce(30),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(30),
            "not-eq":actionType.reduce(30),
            "geq":actionType.reduce(30),
            "leq":actionType.reduce(30),
            "gt":actionType.reduce(30),
            "lt":actionType.reduce(30),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(30),
            "dcolon":actionType.reduce(30),
            "colon":actionType.reduce(30),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(30),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(30),
            "dotdot":actionType.reduce(30),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(30),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(30)
            },
        106:{
            "lapp":actionType.reduce(16),
            "rapp":actionType.reduce(16),
            "rarr":actionType.reduce(16),
            "sleft":actionType.reduce(16),
            "sright":actionType.reduce(16),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(16),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(16),
            "rbracket":actionType.reduce(16),
            "plus":actionType.reduce(16),
            "minus":actionType.reduce(16),
            "power":actionType.shift(53),
            "divide":actionType.reduce(16),
            "modulo":actionType.shift(49),
            "times":actionType.reduce(16),
            "eq":actionType.reduce(16),
            "not-eq":actionType.reduce(16),
            "geq":actionType.reduce(16),
            "leq":actionType.reduce(16),
            "gt":actionType.reduce(16),
            "lt":actionType.reduce(16),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(16),
            "up":actionType.reduce(16),
            "amp":actionType.reduce(16),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(16),
            "dcolon":actionType.reduce(16),
            "colon":actionType.reduce(16),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(16),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(16),
            "dotdot":actionType.reduce(16),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(16),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(16)
            },
        107:{
            "lapp":actionType.reduce(26),
            "rapp":actionType.reduce(26),
            "rarr":actionType.reduce(26),
            "sleft":actionType.reduce(26),
            "sright":actionType.reduce(26),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(26),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(26),
            "rbracket":actionType.reduce(26),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.reduce(26),
            "not-eq":actionType.reduce(26),
            "geq":actionType.reduce(26),
            "leq":actionType.reduce(26),
            "gt":actionType.reduce(26),
            "lt":actionType.reduce(26),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.reduce(26),
            "amp":actionType.reduce(26),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(26),
            "dcolon":actionType.reduce(26),
            "colon":actionType.reduce(26),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(26),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(26),
            "dotdot":actionType.reduce(26),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(26),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(26)
            },
        108:{
            "lapp":actionType.reduce(44),
            "rapp":actionType.reduce(44),
            "rarr":actionType.reduce(44),
            "sleft":actionType.reduce(44),
            "sright":actionType.reduce(44),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(44),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(44),
            "rbracket":actionType.reduce(44),
            "plus":actionType.reduce(44),
            "minus":actionType.reduce(44),
            "power":actionType.reduce(44),
            "divide":actionType.reduce(44),
            "modulo":actionType.reduce(44),
            "times":actionType.reduce(44),
            "eq":actionType.reduce(44),
            "not-eq":actionType.reduce(44),
            "geq":actionType.reduce(44),
            "leq":actionType.reduce(44),
            "gt":actionType.reduce(44),
            "lt":actionType.reduce(44),
            "and":actionType.reduce(44),
            "or":actionType.reduce(44),
            "imp":actionType.reduce(44),
            "biimp":actionType.reduce(44),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(44),
            "up":actionType.reduce(44),
            "amp":actionType.reduce(44),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(44),
            "dcolon":actionType.reduce(44),
            "colon":actionType.reduce(44),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(44),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(44),
            "dotdot":actionType.reduce(44),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(44),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(44)
            },
        109:{
            "lapp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','rbracketm', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','rbracketm', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','rbracketm', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(92),
            "lpar":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "rbracket":actionType.reduce(92),
            "plus":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','rbracketm', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','rbracketm', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','rbracketm', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','rbracketm', but given 'let'"),
            "type":actionType.error("expected 'parenthese','rbracketm', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','rbracketm', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','rbracketm', but given 'match'"),
            "with":actionType.error("expected 'parenthese','rbracketm', but given 'with'"),
            "block":actionType.error("expected 'parenthese','rbracketm', but given 'block'"),
            "of":actionType.error("expected 'parenthese','rbracketm', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','rbracketm', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','rbracketm', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','rbracketm', but given 'float'"),
            "int":actionType.error("expected 'parenthese','rbracketm', but given 'int'"),
            "string":actionType.error("expected 'parenthese','rbracketm', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','rbracketm', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese','rbracketm', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese','rbracketm', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','rbracketm', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','rbracketm', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','rbracketm', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','rbracketm', but given '$'")
            },
        110:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        111:{
            "lapp":actionType.reduce(89),
            "rapp":actionType.reduce(89),
            "rarr":actionType.reduce(89),
            "sleft":actionType.reduce(89),
            "sright":actionType.reduce(89),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(89),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(89),
            "rpar":actionType.reduce(89),
            "rbracket":actionType.reduce(89),
            "plus":actionType.reduce(89),
            "minus":actionType.reduce(89),
            "power":actionType.reduce(89),
            "divide":actionType.reduce(89),
            "modulo":actionType.reduce(89),
            "times":actionType.reduce(89),
            "eq":actionType.reduce(89),
            "not-eq":actionType.reduce(89),
            "geq":actionType.reduce(89),
            "leq":actionType.reduce(89),
            "gt":actionType.reduce(89),
            "lt":actionType.reduce(89),
            "and":actionType.reduce(89),
            "or":actionType.reduce(89),
            "imp":actionType.reduce(89),
            "biimp":actionType.reduce(89),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(89),
            "up":actionType.reduce(89),
            "amp":actionType.reduce(89),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(89),
            "dcolon":actionType.reduce(89),
            "colon":actionType.reduce(89),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(89),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(89),
            "dotdot":actionType.reduce(89),
            "dot":actionType.reduce(89),
            "mid":actionType.reduce(89),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(89),
            "$":actionType.reduce(89)
            },
        112:{
            "lapp":actionType.reduce(90),
            "rapp":actionType.reduce(90),
            "rarr":actionType.reduce(90),
            "sleft":actionType.reduce(90),
            "sright":actionType.reduce(90),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(90),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.reduce(90),
            "rpar":actionType.reduce(90),
            "rbracket":actionType.reduce(90),
            "plus":actionType.reduce(90),
            "minus":actionType.reduce(90),
            "power":actionType.reduce(90),
            "divide":actionType.reduce(90),
            "modulo":actionType.reduce(90),
            "times":actionType.reduce(90),
            "eq":actionType.reduce(90),
            "not-eq":actionType.reduce(90),
            "geq":actionType.reduce(90),
            "leq":actionType.reduce(90),
            "gt":actionType.reduce(90),
            "lt":actionType.reduce(90),
            "and":actionType.reduce(90),
            "or":actionType.reduce(90),
            "imp":actionType.reduce(90),
            "biimp":actionType.reduce(90),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(90),
            "up":actionType.reduce(90),
            "amp":actionType.reduce(90),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(90),
            "dcolon":actionType.reduce(90),
            "colon":actionType.reduce(90),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(90),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(90),
            "dotdot":actionType.reduce(90),
            "dot":actionType.reduce(90),
            "mid":actionType.reduce(90),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','qmark','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(90),
            "$":actionType.reduce(90)
            },
        113:{
            "lapp":actionType.error("expected 'assign', but given 'operator'"),
            "rapp":actionType.error("expected 'assign', but given 'operator'"),
            "rarr":actionType.error("expected 'assign', but given 'operator'"),
            "sleft":actionType.error("expected 'assign', but given 'sleft'"),
            "sright":actionType.error("expected 'assign', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "rpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign', but given 'operator'"),
            "minus":actionType.error("expected 'assign', but given 'operator'"),
            "power":actionType.error("expected 'assign', but given 'operator'"),
            "divide":actionType.error("expected 'assign', but given 'operator'"),
            "modulo":actionType.error("expected 'assign', but given 'operator'"),
            "times":actionType.error("expected 'assign', but given 'operator'"),
            "eq":actionType.error("expected 'assign', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign', but given 'operator'"),
            "geq":actionType.error("expected 'assign', but given 'operator'"),
            "leq":actionType.error("expected 'assign', but given 'operator'"),
            "gt":actionType.error("expected 'assign', but given 'operator'"),
            "lt":actionType.error("expected 'assign', but given 'operator'"),
            "and":actionType.error("expected 'assign', but given 'operator'"),
            "or":actionType.error("expected 'assign', but given 'operator'"),
            "imp":actionType.error("expected 'assign', but given 'operator'"),
            "biimp":actionType.error("expected 'assign', but given 'operator'"),
            "not":actionType.error("expected 'assign', but given 'operator'"),
            "bslash":actionType.error("expected 'assign', but given 'bslash'"),
            "up":actionType.error("expected 'assign', but given 'operator'"),
            "amp":actionType.error("expected 'assign', but given 'operator'"),
            "tilde":actionType.error("expected 'assign', but given 'operator'"),
            "scolon":actionType.error("expected 'assign', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign', but given 'colon'"),
            "let":actionType.error("expected 'assign', but given 'let'"),
            "type":actionType.error("expected 'assign', but given 'type'"),
            "assign":actionType.reduce(69),
            "match":actionType.error("expected 'assign', but given 'match'"),
            "with":actionType.error("expected 'assign', but given 'with'"),
            "block":actionType.error("expected 'assign', but given 'block'"),
            "of":actionType.error("expected 'assign', but given 'of'"),
            "hex":actionType.error("expected 'assign', but given 'hex'"),
            "binary":actionType.error("expected 'assign', but given 'binary'"),
            "float":actionType.error("expected 'assign', but given 'float'"),
            "int":actionType.error("expected 'assign', but given 'int'"),
            "string":actionType.error("expected 'assign', but given 'string'"),
            "bool":actionType.error("expected 'assign', but given 'bool'"),
            "type-id":actionType.error("expected 'assign', but given 'type-id'"),
            "id":actionType.error("expected 'assign', but given 'id'"),
            "comma":actionType.error("expected 'assign', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'assign', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign', but given 'qmark'"),
            "$":actionType.error("expected 'assign', but given '$'")
            },
        114:{
            "lapp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'id','uscore', but given 'sright'"),
            "lbracketm":actionType.error("expected 'id','uscore', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'id','uscore', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "rpar":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'id','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'id','uscore', but given 'operator'"),
            "power":actionType.error("expected 'id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "not":actionType.error("expected 'id','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'id','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'id','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'id','uscore', but given 'let'"),
            "type":actionType.error("expected 'id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'id','uscore', but given 'assign'"),
            "match":actionType.error("expected 'id','uscore', but given 'match'"),
            "with":actionType.error("expected 'id','uscore', but given 'with'"),
            "block":actionType.error("expected 'id','uscore', but given 'block'"),
            "of":actionType.error("expected 'id','uscore', but given 'of'"),
            "hex":actionType.error("expected 'id','uscore', but given 'hex'"),
            "binary":actionType.error("expected 'id','uscore', but given 'binary'"),
            "float":actionType.error("expected 'id','uscore', but given 'float'"),
            "int":actionType.error("expected 'id','uscore', but given 'int'"),
            "string":actionType.error("expected 'id','uscore', but given 'string'"),
            "bool":actionType.error("expected 'id','uscore', but given 'bool'"),
            "type-id":actionType.error("expected 'id','uscore', but given 'type-id'"),
            "id":actionType.shift(66),
            "comma":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(68),
            "qmark":actionType.error("expected 'id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'id','uscore', but given '$'")
            },
        115:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'colon'"),
            "let":actionType.shift(19),
            "type":actionType.shift(26),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given '$'")
            },
        116:{
            "lapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','delimiter','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','delimiter','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(70),
            "rbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','delimiter','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','delimiter','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','delimiter','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','delimiter','parenthese', but given 'type'"),
            "assign":actionType.reduce(70),
            "match":actionType.error("expected 'assign','delimiter','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','delimiter','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','delimiter','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','delimiter','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','delimiter','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','delimiter','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','delimiter','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','delimiter','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','delimiter','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','delimiter','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','delimiter','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','delimiter','parenthese', but given 'id'"),
            "comma":actionType.shift(114),
            "dotdot":actionType.error("expected 'assign','delimiter','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','delimiter','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','delimiter','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','delimiter','parenthese', but given '$'")
            },
        117:{
            "lapp":actionType.reduce(48),
            "rapp":actionType.reduce(48),
            "rarr":actionType.reduce(48),
            "sleft":actionType.reduce(48),
            "sright":actionType.reduce(48),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(48),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(48),
            "rbracket":actionType.reduce(48),
            "plus":actionType.reduce(48),
            "minus":actionType.reduce(48),
            "power":actionType.reduce(48),
            "divide":actionType.reduce(48),
            "modulo":actionType.reduce(48),
            "times":actionType.reduce(48),
            "eq":actionType.reduce(48),
            "not-eq":actionType.reduce(48),
            "geq":actionType.reduce(48),
            "leq":actionType.reduce(48),
            "gt":actionType.reduce(48),
            "lt":actionType.reduce(48),
            "and":actionType.reduce(48),
            "or":actionType.reduce(48),
            "imp":actionType.reduce(48),
            "biimp":actionType.reduce(48),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(48),
            "up":actionType.reduce(48),
            "amp":actionType.reduce(48),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(48),
            "dcolon":actionType.reduce(48),
            "colon":actionType.reduce(48),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(48),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(48),
            "dotdot":actionType.reduce(48),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(48),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(48),
            "$":actionType.reduce(48)
            },
        118:{
            "lapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(51),
            "rbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese', but given 'operator'"),
            "power":actionType.error("expected 'parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese', but given 'operator'"),
            "times":actionType.error("expected 'parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese', but given 'operator'"),
            "and":actionType.error("expected 'parenthese', but given 'operator'"),
            "or":actionType.error("expected 'parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese', but given 'operator'"),
            "not":actionType.error("expected 'parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese', but given 'colon'"),
            "let":actionType.error("expected 'parenthese', but given 'let'"),
            "type":actionType.error("expected 'parenthese', but given 'type'"),
            "assign":actionType.error("expected 'parenthese', but given 'assign'"),
            "match":actionType.error("expected 'parenthese', but given 'match'"),
            "with":actionType.error("expected 'parenthese', but given 'with'"),
            "block":actionType.error("expected 'parenthese', but given 'block'"),
            "of":actionType.error("expected 'parenthese', but given 'of'"),
            "hex":actionType.error("expected 'parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese', but given 'binary'"),
            "float":actionType.error("expected 'parenthese', but given 'float'"),
            "int":actionType.error("expected 'parenthese', but given 'int'"),
            "string":actionType.error("expected 'parenthese', but given 'string'"),
            "bool":actionType.error("expected 'parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese', but given 'id'"),
            "comma":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese', but given '$'")
            },
        119:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        120:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.shift(132),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        121:{
            "lapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'type-id', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'type-id', but given 'operator'"),
            "minus":actionType.error("expected 'type-id', but given 'operator'"),
            "power":actionType.error("expected 'type-id', but given 'operator'"),
            "divide":actionType.error("expected 'type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'type-id', but given 'operator'"),
            "times":actionType.error("expected 'type-id', but given 'operator'"),
            "eq":actionType.error("expected 'type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'type-id', but given 'operator'"),
            "geq":actionType.error("expected 'type-id', but given 'operator'"),
            "leq":actionType.error("expected 'type-id', but given 'operator'"),
            "gt":actionType.error("expected 'type-id', but given 'operator'"),
            "lt":actionType.error("expected 'type-id', but given 'operator'"),
            "and":actionType.error("expected 'type-id', but given 'operator'"),
            "or":actionType.error("expected 'type-id', but given 'operator'"),
            "imp":actionType.error("expected 'type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'type-id', but given 'operator'"),
            "not":actionType.error("expected 'type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'type-id', but given 'bslash'"),
            "up":actionType.error("expected 'type-id', but given 'operator'"),
            "amp":actionType.error("expected 'type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'type-id', but given 'colon'"),
            "let":actionType.error("expected 'type-id', but given 'let'"),
            "type":actionType.error("expected 'type-id', but given 'type'"),
            "assign":actionType.error("expected 'type-id', but given 'assign'"),
            "match":actionType.error("expected 'type-id', but given 'match'"),
            "with":actionType.error("expected 'type-id', but given 'with'"),
            "block":actionType.error("expected 'type-id', but given 'block'"),
            "of":actionType.error("expected 'type-id', but given 'of'"),
            "hex":actionType.error("expected 'type-id', but given 'hex'"),
            "binary":actionType.error("expected 'type-id', but given 'binary'"),
            "float":actionType.error("expected 'type-id', but given 'float'"),
            "int":actionType.error("expected 'type-id', but given 'int'"),
            "string":actionType.error("expected 'type-id', but given 'string'"),
            "bool":actionType.error("expected 'type-id', but given 'bool'"),
            "type-id":actionType.shift(134),
            "id":actionType.error("expected 'type-id', but given 'id'"),
            "comma":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'type-id', but given 'qmark'"),
            "$":actionType.error("expected 'type-id', but given '$'")
            },
        122:{
            "lapp":actionType.reduce(76),
            "rapp":actionType.reduce(76),
            "rarr":actionType.reduce(76),
            "sleft":actionType.reduce(76),
            "sright":actionType.reduce(76),
            "lbracketm":actionType.reduce(76),
            "rbracketm":actionType.reduce(76),
            "lpar":actionType.reduce(76),
            "lbracket":actionType.reduce(76),
            "rpar":actionType.reduce(76),
            "rbracket":actionType.reduce(76),
            "plus":actionType.reduce(76),
            "minus":actionType.reduce(76),
            "power":actionType.reduce(76),
            "divide":actionType.reduce(76),
            "modulo":actionType.reduce(76),
            "times":actionType.reduce(76),
            "eq":actionType.reduce(76),
            "not-eq":actionType.reduce(76),
            "geq":actionType.reduce(76),
            "leq":actionType.reduce(76),
            "gt":actionType.reduce(76),
            "lt":actionType.reduce(76),
            "and":actionType.reduce(76),
            "or":actionType.reduce(76),
            "imp":actionType.reduce(76),
            "biimp":actionType.reduce(76),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(76),
            "up":actionType.reduce(76),
            "amp":actionType.reduce(76),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(76),
            "dcolon":actionType.reduce(76),
            "colon":actionType.reduce(76),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(76),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(76),
            "binary":actionType.reduce(76),
            "float":actionType.reduce(76),
            "int":actionType.reduce(76),
            "string":actionType.reduce(76),
            "bool":actionType.reduce(76),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(76),
            "comma":actionType.reduce(76),
            "dotdot":actionType.reduce(76),
            "dot":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(76),
            "uscore":actionType.reduce(76),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(76)
            },
        123:{
            "lapp":actionType.reduce(75),
            "rapp":actionType.reduce(75),
            "rarr":actionType.reduce(75),
            "sleft":actionType.reduce(75),
            "sright":actionType.reduce(75),
            "lbracketm":actionType.reduce(75),
            "rbracketm":actionType.reduce(75),
            "lpar":actionType.reduce(75),
            "lbracket":actionType.reduce(75),
            "rpar":actionType.reduce(75),
            "rbracket":actionType.reduce(75),
            "plus":actionType.reduce(75),
            "minus":actionType.reduce(75),
            "power":actionType.reduce(75),
            "divide":actionType.reduce(75),
            "modulo":actionType.reduce(75),
            "times":actionType.reduce(75),
            "eq":actionType.reduce(75),
            "not-eq":actionType.reduce(75),
            "geq":actionType.reduce(75),
            "leq":actionType.reduce(75),
            "gt":actionType.reduce(75),
            "lt":actionType.reduce(75),
            "and":actionType.reduce(75),
            "or":actionType.reduce(75),
            "imp":actionType.reduce(75),
            "biimp":actionType.reduce(75),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(75),
            "up":actionType.reduce(75),
            "amp":actionType.reduce(75),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(75),
            "dcolon":actionType.reduce(75),
            "colon":actionType.reduce(75),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(75),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(75),
            "binary":actionType.reduce(75),
            "float":actionType.reduce(75),
            "int":actionType.reduce(75),
            "string":actionType.reduce(75),
            "bool":actionType.reduce(75),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(75),
            "comma":actionType.reduce(75),
            "dotdot":actionType.reduce(75),
            "dot":actionType.shift(77),
            "mid":actionType.reduce(75),
            "uscore":actionType.reduce(75),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(75)
            },
        124:{
            "lapp":actionType.reduce(75),
            "rapp":actionType.reduce(75),
            "rarr":actionType.reduce(75),
            "sleft":actionType.reduce(75),
            "sright":actionType.reduce(75),
            "lbracketm":actionType.reduce(75),
            "rbracketm":actionType.reduce(75),
            "lpar":actionType.reduce(75),
            "lbracket":actionType.reduce(75),
            "rpar":actionType.reduce(75),
            "rbracket":actionType.reduce(75),
            "plus":actionType.reduce(75),
            "minus":actionType.reduce(75),
            "power":actionType.reduce(75),
            "divide":actionType.reduce(75),
            "modulo":actionType.reduce(75),
            "times":actionType.reduce(75),
            "eq":actionType.reduce(75),
            "not-eq":actionType.reduce(75),
            "geq":actionType.reduce(75),
            "leq":actionType.reduce(75),
            "gt":actionType.reduce(75),
            "lt":actionType.reduce(75),
            "and":actionType.reduce(75),
            "or":actionType.reduce(75),
            "imp":actionType.reduce(75),
            "biimp":actionType.reduce(75),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(75),
            "up":actionType.reduce(75),
            "amp":actionType.reduce(75),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(75),
            "dcolon":actionType.reduce(75),
            "colon":actionType.reduce(75),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(75),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(75),
            "binary":actionType.reduce(75),
            "float":actionType.reduce(75),
            "int":actionType.reduce(75),
            "string":actionType.reduce(75),
            "bool":actionType.reduce(75),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(75),
            "comma":actionType.reduce(75),
            "dotdot":actionType.reduce(75),
            "dot":actionType.shift(77),
            "mid":actionType.reduce(75),
            "uscore":actionType.reduce(75),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(75)
            },
        125:{
            "lapp":actionType.reduce(67),
            "rapp":actionType.reduce(67),
            "rarr":actionType.reduce(67),
            "sleft":actionType.reduce(67),
            "sright":actionType.reduce(67),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(67),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(67),
            "rbracket":actionType.reduce(67),
            "plus":actionType.reduce(67),
            "minus":actionType.reduce(67),
            "power":actionType.reduce(67),
            "divide":actionType.reduce(67),
            "modulo":actionType.reduce(67),
            "times":actionType.reduce(67),
            "eq":actionType.reduce(67),
            "not-eq":actionType.reduce(67),
            "geq":actionType.reduce(67),
            "leq":actionType.reduce(67),
            "gt":actionType.reduce(67),
            "lt":actionType.reduce(67),
            "and":actionType.reduce(67),
            "or":actionType.reduce(67),
            "imp":actionType.reduce(67),
            "biimp":actionType.reduce(67),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(67),
            "up":actionType.reduce(67),
            "amp":actionType.reduce(67),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(67),
            "dcolon":actionType.reduce(67),
            "colon":actionType.reduce(67),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(67),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(67),
            "dotdot":actionType.reduce(67),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(67),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(67),
            "$":actionType.reduce(67)
            },
        126:{
            "lapp":actionType.reduce(66),
            "rapp":actionType.reduce(66),
            "rarr":actionType.reduce(66),
            "sleft":actionType.reduce(66),
            "sright":actionType.reduce(66),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(66),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(66),
            "rbracket":actionType.reduce(66),
            "plus":actionType.reduce(66),
            "minus":actionType.reduce(66),
            "power":actionType.reduce(66),
            "divide":actionType.reduce(66),
            "modulo":actionType.reduce(66),
            "times":actionType.reduce(66),
            "eq":actionType.reduce(66),
            "not-eq":actionType.reduce(66),
            "geq":actionType.reduce(66),
            "leq":actionType.reduce(66),
            "gt":actionType.reduce(66),
            "lt":actionType.reduce(66),
            "and":actionType.reduce(66),
            "or":actionType.reduce(66),
            "imp":actionType.reduce(66),
            "biimp":actionType.reduce(66),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(66),
            "up":actionType.reduce(66),
            "amp":actionType.reduce(66),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(66),
            "dcolon":actionType.reduce(66),
            "colon":actionType.reduce(66),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(66),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(66),
            "dotdot":actionType.reduce(66),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(66),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','qmark','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.reduce(66),
            "$":actionType.reduce(66)
            },
        127:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(93),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'parenthese'"),
            "rbracket":actionType.reduce(93),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'operator'"),
            "scolon":actionType.shift(110),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','parenthese','rbracketm','delimiter','sleft','sright', but given '$'")
            },
        128:{
            "lapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','delimiter','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','delimiter','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','delimiter','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(70),
            "rbracket":actionType.error("expected 'assign','delimiter','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','delimiter','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','delimiter','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','delimiter','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','delimiter','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','delimiter','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','delimiter','parenthese', but given 'type'"),
            "assign":actionType.reduce(70),
            "match":actionType.error("expected 'assign','delimiter','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','delimiter','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','delimiter','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','delimiter','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','delimiter','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','delimiter','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','delimiter','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','delimiter','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','delimiter','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','delimiter','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','delimiter','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','delimiter','parenthese', but given 'id'"),
            "comma":actionType.shift(114),
            "dotdot":actionType.error("expected 'assign','delimiter','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','delimiter','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','delimiter','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','delimiter','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','delimiter','parenthese', but given '$'")
            },
        129:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.reduce(4),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        130:{
            "lapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rpar":actionType.shift(139),
            "rbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese', but given 'operator'"),
            "power":actionType.error("expected 'parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese', but given 'operator'"),
            "times":actionType.error("expected 'parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese', but given 'operator'"),
            "and":actionType.error("expected 'parenthese', but given 'operator'"),
            "or":actionType.error("expected 'parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese', but given 'operator'"),
            "not":actionType.error("expected 'parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese', but given 'colon'"),
            "let":actionType.error("expected 'parenthese', but given 'let'"),
            "type":actionType.error("expected 'parenthese', but given 'type'"),
            "assign":actionType.error("expected 'parenthese', but given 'assign'"),
            "match":actionType.error("expected 'parenthese', but given 'match'"),
            "with":actionType.error("expected 'parenthese', but given 'with'"),
            "block":actionType.error("expected 'parenthese', but given 'block'"),
            "of":actionType.error("expected 'parenthese', but given 'of'"),
            "hex":actionType.error("expected 'parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese', but given 'binary'"),
            "float":actionType.error("expected 'parenthese', but given 'float'"),
            "int":actionType.error("expected 'parenthese', but given 'int'"),
            "string":actionType.error("expected 'parenthese', but given 'string'"),
            "bool":actionType.error("expected 'parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese', but given 'id'"),
            "comma":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese', but given '$'")
            },
        131:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.reduce(52),
            "rbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'parenthese'"),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "dcolon":actionType.shift(38),
            "colon":actionType.shift(37),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'id'"),
            "comma":actionType.shift(119),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','sleft','sright', but given '$'")
            },
        132:{
            "lapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "power":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "not":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'assign'"),
            "match":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'match'"),
            "with":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'with'"),
            "block":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'block'"),
            "of":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given '$'")
            },
        133:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.reduce(3),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        134:{
            "lapp":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter','of', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','of', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','of', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','of', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','of', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','of', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter','of', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter','of', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "times":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','of', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','of', but given 'operator'"),
            "scolon":actionType.reduce(82),
            "dcolon":actionType.error("expected 'delimiter','of', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','of', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','of', but given 'let'"),
            "type":actionType.error("expected 'delimiter','of', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','of', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','of', but given 'match'"),
            "with":actionType.error("expected 'delimiter','of', but given 'with'"),
            "block":actionType.error("expected 'delimiter','of', but given 'block'"),
            "of":actionType.shift(146),
            "hex":actionType.error("expected 'delimiter','of', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','of', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','of', but given 'float'"),
            "int":actionType.error("expected 'delimiter','of', but given 'int'"),
            "string":actionType.error("expected 'delimiter','of', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','of', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','of', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','of', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','of', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','of', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','of', but given 'delimiter'"),
            "mid":actionType.reduce(82),
            "uscore":actionType.error("expected 'delimiter','of', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','of', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','of', but given '$'")
            },
        135:{
            "lapp":actionType.reduce(78),
            "rapp":actionType.reduce(78),
            "rarr":actionType.reduce(78),
            "sleft":actionType.reduce(78),
            "sright":actionType.reduce(78),
            "lbracketm":actionType.reduce(78),
            "rbracketm":actionType.reduce(78),
            "lpar":actionType.reduce(78),
            "lbracket":actionType.reduce(78),
            "rpar":actionType.reduce(78),
            "rbracket":actionType.reduce(78),
            "plus":actionType.reduce(78),
            "minus":actionType.reduce(78),
            "power":actionType.reduce(78),
            "divide":actionType.reduce(78),
            "modulo":actionType.reduce(78),
            "times":actionType.reduce(78),
            "eq":actionType.reduce(78),
            "not-eq":actionType.reduce(78),
            "geq":actionType.reduce(78),
            "leq":actionType.reduce(78),
            "gt":actionType.reduce(78),
            "lt":actionType.reduce(78),
            "and":actionType.reduce(78),
            "or":actionType.reduce(78),
            "imp":actionType.reduce(78),
            "biimp":actionType.reduce(78),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(78),
            "up":actionType.reduce(78),
            "amp":actionType.reduce(78),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(78),
            "dcolon":actionType.reduce(78),
            "colon":actionType.reduce(78),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(78),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(78),
            "binary":actionType.reduce(78),
            "float":actionType.reduce(78),
            "int":actionType.reduce(78),
            "string":actionType.reduce(78),
            "bool":actionType.reduce(78),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(78),
            "comma":actionType.reduce(78),
            "dotdot":actionType.reduce(78),
            "dot":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(78),
            "uscore":actionType.reduce(78),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(78)
            },
        136:{
            "lapp":actionType.reduce(77),
            "rapp":actionType.reduce(77),
            "rarr":actionType.reduce(77),
            "sleft":actionType.reduce(77),
            "sright":actionType.reduce(77),
            "lbracketm":actionType.reduce(77),
            "rbracketm":actionType.reduce(77),
            "lpar":actionType.reduce(77),
            "lbracket":actionType.reduce(77),
            "rpar":actionType.reduce(77),
            "rbracket":actionType.reduce(77),
            "plus":actionType.reduce(77),
            "minus":actionType.reduce(77),
            "power":actionType.reduce(77),
            "divide":actionType.reduce(77),
            "modulo":actionType.reduce(77),
            "times":actionType.reduce(77),
            "eq":actionType.reduce(77),
            "not-eq":actionType.reduce(77),
            "geq":actionType.reduce(77),
            "leq":actionType.reduce(77),
            "gt":actionType.reduce(77),
            "lt":actionType.reduce(77),
            "and":actionType.reduce(77),
            "or":actionType.reduce(77),
            "imp":actionType.reduce(77),
            "biimp":actionType.reduce(77),
            "not":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(77),
            "up":actionType.reduce(77),
            "amp":actionType.reduce(77),
            "tilde":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(77),
            "dcolon":actionType.reduce(77),
            "colon":actionType.reduce(77),
            "let":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'match'"),
            "with":actionType.reduce(77),
            "block":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'of'"),
            "hex":actionType.reduce(77),
            "binary":actionType.reduce(77),
            "float":actionType.reduce(77),
            "int":actionType.reduce(77),
            "string":actionType.reduce(77),
            "bool":actionType.reduce(77),
            "type-id":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'type-id'"),
            "id":actionType.reduce(77),
            "comma":actionType.reduce(77),
            "dotdot":actionType.reduce(77),
            "dot":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(77),
            "uscore":actionType.reduce(77),
            "qmark":actionType.error("expected 'operator','binary','bool','bslash','colon','delimiter','dcolon','dotdot','float','hex','id','int','parenthese','lbracketm','rbracketm','sleft','sright','string','uscore','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(77)
            },
        137:{
            "lapp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','rbracketm', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','rbracketm', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','rbracketm', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(94),
            "lpar":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','rbracketm', but given 'parenthese'"),
            "rbracket":actionType.reduce(94),
            "plus":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','rbracketm', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','rbracketm', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','rbracketm', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','rbracketm', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','rbracketm', but given 'let'"),
            "type":actionType.error("expected 'parenthese','rbracketm', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','rbracketm', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','rbracketm', but given 'match'"),
            "with":actionType.error("expected 'parenthese','rbracketm', but given 'with'"),
            "block":actionType.error("expected 'parenthese','rbracketm', but given 'block'"),
            "of":actionType.error("expected 'parenthese','rbracketm', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','rbracketm', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','rbracketm', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','rbracketm', but given 'float'"),
            "int":actionType.error("expected 'parenthese','rbracketm', but given 'int'"),
            "string":actionType.error("expected 'parenthese','rbracketm', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','rbracketm', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese','rbracketm', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese','rbracketm', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','rbracketm', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','rbracketm', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','rbracketm', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','rbracketm', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','rbracketm', but given '$'")
            },
        138:{
            "lapp":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'assign','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'assign','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(71),
            "rbracket":actionType.error("expected 'assign','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "times":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'assign','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'assign','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'assign','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'assign','parenthese', but given 'let'"),
            "type":actionType.error("expected 'assign','parenthese', but given 'type'"),
            "assign":actionType.reduce(71),
            "match":actionType.error("expected 'assign','parenthese', but given 'match'"),
            "with":actionType.error("expected 'assign','parenthese', but given 'with'"),
            "block":actionType.error("expected 'assign','parenthese', but given 'block'"),
            "of":actionType.error("expected 'assign','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'assign','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'assign','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'assign','parenthese', but given 'float'"),
            "int":actionType.error("expected 'assign','parenthese', but given 'int'"),
            "string":actionType.error("expected 'assign','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'assign','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'assign','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'assign','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'assign','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'assign','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'assign','parenthese', but given '$'")
            },
        139:{
            "lapp":actionType.error("expected 'assign', but given 'operator'"),
            "rapp":actionType.error("expected 'assign', but given 'operator'"),
            "rarr":actionType.error("expected 'assign', but given 'operator'"),
            "sleft":actionType.error("expected 'assign', but given 'sleft'"),
            "sright":actionType.error("expected 'assign', but given 'sright'"),
            "lbracketm":actionType.error("expected 'assign', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'assign', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "rpar":actionType.error("expected 'assign', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'assign', but given 'parenthese'"),
            "plus":actionType.error("expected 'assign', but given 'operator'"),
            "minus":actionType.error("expected 'assign', but given 'operator'"),
            "power":actionType.error("expected 'assign', but given 'operator'"),
            "divide":actionType.error("expected 'assign', but given 'operator'"),
            "modulo":actionType.error("expected 'assign', but given 'operator'"),
            "times":actionType.error("expected 'assign', but given 'operator'"),
            "eq":actionType.error("expected 'assign', but given 'operator'"),
            "not-eq":actionType.error("expected 'assign', but given 'operator'"),
            "geq":actionType.error("expected 'assign', but given 'operator'"),
            "leq":actionType.error("expected 'assign', but given 'operator'"),
            "gt":actionType.error("expected 'assign', but given 'operator'"),
            "lt":actionType.error("expected 'assign', but given 'operator'"),
            "and":actionType.error("expected 'assign', but given 'operator'"),
            "or":actionType.error("expected 'assign', but given 'operator'"),
            "imp":actionType.error("expected 'assign', but given 'operator'"),
            "biimp":actionType.error("expected 'assign', but given 'operator'"),
            "not":actionType.error("expected 'assign', but given 'operator'"),
            "bslash":actionType.error("expected 'assign', but given 'bslash'"),
            "up":actionType.error("expected 'assign', but given 'operator'"),
            "amp":actionType.error("expected 'assign', but given 'operator'"),
            "tilde":actionType.error("expected 'assign', but given 'operator'"),
            "scolon":actionType.error("expected 'assign', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'assign', but given 'dcolon'"),
            "colon":actionType.error("expected 'assign', but given 'colon'"),
            "let":actionType.error("expected 'assign', but given 'let'"),
            "type":actionType.error("expected 'assign', but given 'type'"),
            "assign":actionType.reduce(68),
            "match":actionType.error("expected 'assign', but given 'match'"),
            "with":actionType.error("expected 'assign', but given 'with'"),
            "block":actionType.error("expected 'assign', but given 'block'"),
            "of":actionType.error("expected 'assign', but given 'of'"),
            "hex":actionType.error("expected 'assign', but given 'hex'"),
            "binary":actionType.error("expected 'assign', but given 'binary'"),
            "float":actionType.error("expected 'assign', but given 'float'"),
            "int":actionType.error("expected 'assign', but given 'int'"),
            "string":actionType.error("expected 'assign', but given 'string'"),
            "bool":actionType.error("expected 'assign', but given 'bool'"),
            "type-id":actionType.error("expected 'assign', but given 'type-id'"),
            "id":actionType.error("expected 'assign', but given 'id'"),
            "comma":actionType.error("expected 'assign', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'assign', but given 'dotdot'"),
            "dot":actionType.error("expected 'assign', but given 'delimiter'"),
            "mid":actionType.error("expected 'assign', but given 'delimiter'"),
            "uscore":actionType.error("expected 'assign', but given 'uscore'"),
            "qmark":actionType.error("expected 'assign', but given 'qmark'"),
            "$":actionType.error("expected 'assign', but given '$'")
            },
        140:{
            "lapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(53),
            "rbracket":actionType.error("expected 'parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese', but given 'operator'"),
            "power":actionType.error("expected 'parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese', but given 'operator'"),
            "times":actionType.error("expected 'parenthese', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese', but given 'operator'"),
            "and":actionType.error("expected 'parenthese', but given 'operator'"),
            "or":actionType.error("expected 'parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese', but given 'operator'"),
            "not":actionType.error("expected 'parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese', but given 'colon'"),
            "let":actionType.error("expected 'parenthese', but given 'let'"),
            "type":actionType.error("expected 'parenthese', but given 'type'"),
            "assign":actionType.error("expected 'parenthese', but given 'assign'"),
            "match":actionType.error("expected 'parenthese', but given 'match'"),
            "with":actionType.error("expected 'parenthese', but given 'with'"),
            "block":actionType.error("expected 'parenthese', but given 'block'"),
            "of":actionType.error("expected 'parenthese', but given 'of'"),
            "hex":actionType.error("expected 'parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese', but given 'binary'"),
            "float":actionType.error("expected 'parenthese', but given 'float'"),
            "int":actionType.error("expected 'parenthese', but given 'int'"),
            "string":actionType.error("expected 'parenthese', but given 'string'"),
            "bool":actionType.error("expected 'parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'parenthese', but given 'id'"),
            "comma":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese', but given '$'")
            },
        141:{
            "lapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','dcolon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','dcolon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','dcolon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dcolon":actionType.shift(148),
            "colon":actionType.reduce(10),
            "let":actionType.error("expected 'colon','dcolon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','dcolon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','dcolon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','dcolon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','dcolon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','dcolon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','dcolon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','dcolon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','dcolon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','dcolon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','dcolon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','dcolon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','dcolon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','dcolon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','dcolon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','dcolon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','dcolon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(10),
            "$":actionType.error("expected 'colon','dcolon','qmark', but given '$'")
            },
        142:{
            "lapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'colon','qmark', but given 'dcolon'"),
            "colon":actionType.reduce(12),
            "let":actionType.error("expected 'colon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','qmark', but given 'uscore'"),
            "qmark":actionType.shift(150),
            "$":actionType.error("expected 'colon','qmark', but given '$'")
            },
        143:{
            "lapp":actionType.reduce(45),
            "rapp":actionType.reduce(45),
            "rarr":actionType.reduce(45),
            "sleft":actionType.reduce(45),
            "sright":actionType.reduce(45),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(45),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(45),
            "rbracket":actionType.reduce(45),
            "plus":actionType.reduce(45),
            "minus":actionType.reduce(45),
            "power":actionType.reduce(45),
            "divide":actionType.reduce(45),
            "modulo":actionType.reduce(45),
            "times":actionType.reduce(45),
            "eq":actionType.reduce(45),
            "not-eq":actionType.reduce(45),
            "geq":actionType.reduce(45),
            "leq":actionType.reduce(45),
            "gt":actionType.reduce(45),
            "lt":actionType.reduce(45),
            "and":actionType.reduce(45),
            "or":actionType.reduce(45),
            "imp":actionType.reduce(45),
            "biimp":actionType.reduce(45),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(45),
            "up":actionType.reduce(45),
            "amp":actionType.reduce(45),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(45),
            "dcolon":actionType.reduce(45),
            "colon":actionType.reduce(45),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(45),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(45),
            "dotdot":actionType.reduce(45),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(45),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(45)
            },
        144:{
            "lapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "power":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'assign'"),
            "match":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'match'"),
            "with":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'with'"),
            "block":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'block'"),
            "of":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type-id'"),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given '$'")
            },
        145:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.reduce(80),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.shift(153),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        146:{
            "lapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese','type-id', but given 'rbracketm'"),
            "lpar":actionType.shift(157),
            "lbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','type-id', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','type-id', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','type-id', but given 'let'"),
            "type":actionType.error("expected 'parenthese','type-id', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','type-id', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','type-id', but given 'match'"),
            "with":actionType.error("expected 'parenthese','type-id', but given 'with'"),
            "block":actionType.error("expected 'parenthese','type-id', but given 'block'"),
            "of":actionType.error("expected 'parenthese','type-id', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','type-id', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','type-id', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','type-id', but given 'float'"),
            "int":actionType.error("expected 'parenthese','type-id', but given 'int'"),
            "string":actionType.error("expected 'parenthese','type-id', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','type-id', but given 'bool'"),
            "type-id":actionType.shift(27),
            "id":actionType.error("expected 'parenthese','type-id', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','type-id', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','type-id', but given '$'")
            },
        147:{
            "lapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'colon','qmark', but given 'dcolon'"),
            "colon":actionType.reduce(9),
            "let":actionType.error("expected 'colon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(9),
            "$":actionType.error("expected 'colon','qmark', but given '$'")
            },
        148:{
            "lapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "power":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "not":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'assign'"),
            "match":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'match'"),
            "with":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'with'"),
            "block":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'block'"),
            "of":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'type-id'"),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','uscore', but given '$'")
            },
        149:{
            "lapp":actionType.error("expected 'colon', but given 'operator'"),
            "rapp":actionType.error("expected 'colon', but given 'operator'"),
            "rarr":actionType.error("expected 'colon', but given 'operator'"),
            "sleft":actionType.error("expected 'colon', but given 'sleft'"),
            "sright":actionType.error("expected 'colon', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon', but given 'operator'"),
            "minus":actionType.error("expected 'colon', but given 'operator'"),
            "power":actionType.error("expected 'colon', but given 'operator'"),
            "divide":actionType.error("expected 'colon', but given 'operator'"),
            "modulo":actionType.error("expected 'colon', but given 'operator'"),
            "times":actionType.error("expected 'colon', but given 'operator'"),
            "eq":actionType.error("expected 'colon', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon', but given 'operator'"),
            "geq":actionType.error("expected 'colon', but given 'operator'"),
            "leq":actionType.error("expected 'colon', but given 'operator'"),
            "gt":actionType.error("expected 'colon', but given 'operator'"),
            "lt":actionType.error("expected 'colon', but given 'operator'"),
            "and":actionType.error("expected 'colon', but given 'operator'"),
            "or":actionType.error("expected 'colon', but given 'operator'"),
            "imp":actionType.error("expected 'colon', but given 'operator'"),
            "biimp":actionType.error("expected 'colon', but given 'operator'"),
            "not":actionType.error("expected 'colon', but given 'operator'"),
            "bslash":actionType.error("expected 'colon', but given 'bslash'"),
            "up":actionType.error("expected 'colon', but given 'operator'"),
            "amp":actionType.error("expected 'colon', but given 'operator'"),
            "tilde":actionType.error("expected 'colon', but given 'operator'"),
            "scolon":actionType.error("expected 'colon', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'colon', but given 'dcolon'"),
            "colon":actionType.shift(159),
            "let":actionType.error("expected 'colon', but given 'let'"),
            "type":actionType.error("expected 'colon', but given 'type'"),
            "assign":actionType.error("expected 'colon', but given 'assign'"),
            "match":actionType.error("expected 'colon', but given 'match'"),
            "with":actionType.error("expected 'colon', but given 'with'"),
            "block":actionType.error("expected 'colon', but given 'block'"),
            "of":actionType.error("expected 'colon', but given 'of'"),
            "hex":actionType.error("expected 'colon', but given 'hex'"),
            "binary":actionType.error("expected 'colon', but given 'binary'"),
            "float":actionType.error("expected 'colon', but given 'float'"),
            "int":actionType.error("expected 'colon', but given 'int'"),
            "string":actionType.error("expected 'colon', but given 'string'"),
            "bool":actionType.error("expected 'colon', but given 'bool'"),
            "type-id":actionType.error("expected 'colon', but given 'type-id'"),
            "id":actionType.error("expected 'colon', but given 'id'"),
            "comma":actionType.error("expected 'colon', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon', but given 'uscore'"),
            "qmark":actionType.error("expected 'colon', but given 'qmark'"),
            "$":actionType.error("expected 'colon', but given '$'")
            },
        150:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','match','operator','string','type-id','uscore', but given '$'")
            },
        151:{
            "lapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','dcolon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','dcolon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','dcolon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dcolon":actionType.shift(148),
            "colon":actionType.reduce(10),
            "let":actionType.error("expected 'colon','dcolon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','dcolon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','dcolon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','dcolon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','dcolon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','dcolon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','dcolon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','dcolon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','dcolon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','dcolon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','dcolon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','dcolon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','dcolon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','dcolon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','dcolon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','dcolon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','dcolon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(10),
            "$":actionType.error("expected 'colon','dcolon','qmark', but given '$'")
            },
        152:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.reduce(79),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        153:{
            "lapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'type-id', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'type-id', but given 'operator'"),
            "minus":actionType.error("expected 'type-id', but given 'operator'"),
            "power":actionType.error("expected 'type-id', but given 'operator'"),
            "divide":actionType.error("expected 'type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'type-id', but given 'operator'"),
            "times":actionType.error("expected 'type-id', but given 'operator'"),
            "eq":actionType.error("expected 'type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'type-id', but given 'operator'"),
            "geq":actionType.error("expected 'type-id', but given 'operator'"),
            "leq":actionType.error("expected 'type-id', but given 'operator'"),
            "gt":actionType.error("expected 'type-id', but given 'operator'"),
            "lt":actionType.error("expected 'type-id', but given 'operator'"),
            "and":actionType.error("expected 'type-id', but given 'operator'"),
            "or":actionType.error("expected 'type-id', but given 'operator'"),
            "imp":actionType.error("expected 'type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'type-id', but given 'operator'"),
            "not":actionType.error("expected 'type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'type-id', but given 'bslash'"),
            "up":actionType.error("expected 'type-id', but given 'operator'"),
            "amp":actionType.error("expected 'type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'type-id', but given 'colon'"),
            "let":actionType.error("expected 'type-id', but given 'let'"),
            "type":actionType.error("expected 'type-id', but given 'type'"),
            "assign":actionType.error("expected 'type-id', but given 'assign'"),
            "match":actionType.error("expected 'type-id', but given 'match'"),
            "with":actionType.error("expected 'type-id', but given 'with'"),
            "block":actionType.error("expected 'type-id', but given 'block'"),
            "of":actionType.error("expected 'type-id', but given 'of'"),
            "hex":actionType.error("expected 'type-id', but given 'hex'"),
            "binary":actionType.error("expected 'type-id', but given 'binary'"),
            "float":actionType.error("expected 'type-id', but given 'float'"),
            "int":actionType.error("expected 'type-id', but given 'int'"),
            "string":actionType.error("expected 'type-id', but given 'string'"),
            "bool":actionType.error("expected 'type-id', but given 'bool'"),
            "type-id":actionType.shift(134),
            "id":actionType.error("expected 'type-id', but given 'id'"),
            "comma":actionType.error("expected 'type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'type-id', but given 'qmark'"),
            "$":actionType.error("expected 'type-id', but given '$'")
            },
        154:{
            "lapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rarr":actionType.reduce(88),
            "sleft":actionType.error("expected 'delimiter','operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(88),
            "rbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "times":actionType.reduce(88),
            "eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "scolon":actionType.reduce(88),
            "dcolon":actionType.error("expected 'delimiter','operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "mid":actionType.reduce(88),
            "uscore":actionType.error("expected 'delimiter','operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator','parenthese', but given '$'")
            },
        155:{
            "lapp":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "rarr":actionType.shift(163),
            "sleft":actionType.error("expected 'delimiter','operator', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter','operator', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter','operator', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "times":actionType.shift(164),
            "eq":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator', but given 'operator'"),
            "scolon":actionType.reduce(83),
            "dcolon":actionType.error("expected 'delimiter','operator', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator', but given 'delimiter'"),
            "mid":actionType.reduce(83),
            "uscore":actionType.error("expected 'delimiter','operator', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator', but given '$'")
            },
        156:{
            "lapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rarr":actionType.reduce(84),
            "sleft":actionType.error("expected 'delimiter','operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(84),
            "rbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "times":actionType.reduce(84),
            "eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "scolon":actionType.reduce(84),
            "dcolon":actionType.error("expected 'delimiter','operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "mid":actionType.reduce(84),
            "uscore":actionType.error("expected 'delimiter','operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator','parenthese', but given '$'")
            },
        157:{
            "lapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese','type-id', but given 'rbracketm'"),
            "lpar":actionType.shift(157),
            "lbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','type-id', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','type-id', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','type-id', but given 'let'"),
            "type":actionType.error("expected 'parenthese','type-id', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','type-id', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','type-id', but given 'match'"),
            "with":actionType.error("expected 'parenthese','type-id', but given 'with'"),
            "block":actionType.error("expected 'parenthese','type-id', but given 'block'"),
            "of":actionType.error("expected 'parenthese','type-id', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','type-id', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','type-id', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','type-id', but given 'float'"),
            "int":actionType.error("expected 'parenthese','type-id', but given 'int'"),
            "string":actionType.error("expected 'parenthese','type-id', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','type-id', but given 'bool'"),
            "type-id":actionType.shift(27),
            "id":actionType.error("expected 'parenthese','type-id', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','type-id', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','type-id', but given '$'")
            },
        158:{
            "lapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','dcolon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','dcolon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','dcolon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','dcolon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','dcolon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','dcolon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dcolon":actionType.shift(148),
            "colon":actionType.reduce(10),
            "let":actionType.error("expected 'colon','dcolon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','dcolon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','dcolon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','dcolon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','dcolon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','dcolon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','dcolon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','dcolon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','dcolon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','dcolon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','dcolon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','dcolon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','dcolon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','dcolon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','dcolon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','dcolon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','dcolon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','dcolon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(10),
            "$":actionType.error("expected 'colon','dcolon','qmark', but given '$'")
            },
        159:{
            "lapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "minus":actionType.shift(22),
            "power":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "not":actionType.shift(23),
            "bslash":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'operator'"),
            "tilde":actionType.shift(25),
            "scolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'colon'"),
            "let":actionType.shift(19),
            "type":actionType.shift(26),
            "assign":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'assign'"),
            "match":actionType.shift(21),
            "with":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'with'"),
            "block":actionType.shift(11),
            "of":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','block','bool','float','hex','id','int','parenthese','lbracketm','let','match','operator','string','type','type-id','uscore', but given '$'")
            },
        160:{
            "lapp":actionType.shift(45),
            "rapp":actionType.shift(54),
            "rarr":actionType.shift(55),
            "sleft":actionType.shift(56),
            "sright":actionType.shift(57),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'parenthese'"),
            "rpar":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'parenthese'"),
            "plus":actionType.shift(52),
            "minus":actionType.shift(48),
            "power":actionType.shift(53),
            "divide":actionType.shift(39),
            "modulo":actionType.shift(49),
            "times":actionType.shift(58),
            "eq":actionType.shift(41),
            "not-eq":actionType.shift(50),
            "geq":actionType.shift(42),
            "leq":actionType.shift(46),
            "gt":actionType.shift(43),
            "lt":actionType.shift(47),
            "and":actionType.shift(34),
            "or":actionType.shift(51),
            "imp":actionType.shift(44),
            "biimp":actionType.shift(35),
            "not":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'operator'"),
            "bslash":actionType.shift(36),
            "up":actionType.shift(59),
            "amp":actionType.shift(33),
            "tilde":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'delimiter'"),
            "dcolon":actionType.shift(38),
            "colon":actionType.reduce(13),
            "let":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'match'"),
            "with":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'with'"),
            "block":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'id'"),
            "comma":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'delimiter'"),
            "dotdot":actionType.shift(40),
            "dot":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given 'qmark'"),
            "$":actionType.error("expected 'operator','bslash','colon','dcolon','dotdot','sleft','sright', but given '$'")
            },
        161:{
            "lapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'colon','qmark', but given 'dcolon'"),
            "colon":actionType.reduce(8),
            "let":actionType.error("expected 'colon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(8),
            "$":actionType.error("expected 'colon','qmark', but given '$'")
            },
        162:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.reduce(81),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        163:{
            "lapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese','type-id', but given 'rbracketm'"),
            "lpar":actionType.shift(157),
            "lbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','type-id', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','type-id', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','type-id', but given 'let'"),
            "type":actionType.error("expected 'parenthese','type-id', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','type-id', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','type-id', but given 'match'"),
            "with":actionType.error("expected 'parenthese','type-id', but given 'with'"),
            "block":actionType.error("expected 'parenthese','type-id', but given 'block'"),
            "of":actionType.error("expected 'parenthese','type-id', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','type-id', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','type-id', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','type-id', but given 'float'"),
            "int":actionType.error("expected 'parenthese','type-id', but given 'int'"),
            "string":actionType.error("expected 'parenthese','type-id', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','type-id', but given 'bool'"),
            "type-id":actionType.shift(27),
            "id":actionType.error("expected 'parenthese','type-id', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','type-id', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','type-id', but given '$'")
            },
        164:{
            "lapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rapp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "rarr":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "sleft":actionType.error("expected 'parenthese','type-id', but given 'sleft'"),
            "sright":actionType.error("expected 'parenthese','type-id', but given 'sright'"),
            "lbracketm":actionType.error("expected 'parenthese','type-id', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'parenthese','type-id', but given 'rbracketm'"),
            "lpar":actionType.shift(157),
            "lbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rpar":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'parenthese','type-id', but given 'parenthese'"),
            "plus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "minus":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "power":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "divide":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "modulo":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "times":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not-eq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "geq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "leq":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "gt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "lt":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "and":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "or":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "imp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "biimp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "not":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "bslash":actionType.error("expected 'parenthese','type-id', but given 'bslash'"),
            "up":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "amp":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "tilde":actionType.error("expected 'parenthese','type-id', but given 'operator'"),
            "scolon":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'parenthese','type-id', but given 'dcolon'"),
            "colon":actionType.error("expected 'parenthese','type-id', but given 'colon'"),
            "let":actionType.error("expected 'parenthese','type-id', but given 'let'"),
            "type":actionType.error("expected 'parenthese','type-id', but given 'type'"),
            "assign":actionType.error("expected 'parenthese','type-id', but given 'assign'"),
            "match":actionType.error("expected 'parenthese','type-id', but given 'match'"),
            "with":actionType.error("expected 'parenthese','type-id', but given 'with'"),
            "block":actionType.error("expected 'parenthese','type-id', but given 'block'"),
            "of":actionType.error("expected 'parenthese','type-id', but given 'of'"),
            "hex":actionType.error("expected 'parenthese','type-id', but given 'hex'"),
            "binary":actionType.error("expected 'parenthese','type-id', but given 'binary'"),
            "float":actionType.error("expected 'parenthese','type-id', but given 'float'"),
            "int":actionType.error("expected 'parenthese','type-id', but given 'int'"),
            "string":actionType.error("expected 'parenthese','type-id', but given 'string'"),
            "bool":actionType.error("expected 'parenthese','type-id', but given 'bool'"),
            "type-id":actionType.shift(27),
            "id":actionType.error("expected 'parenthese','type-id', but given 'id'"),
            "comma":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'parenthese','type-id', but given 'dotdot'"),
            "dot":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "mid":actionType.error("expected 'parenthese','type-id', but given 'delimiter'"),
            "uscore":actionType.error("expected 'parenthese','type-id', but given 'uscore'"),
            "qmark":actionType.error("expected 'parenthese','type-id', but given 'qmark'"),
            "$":actionType.error("expected 'parenthese','type-id', but given '$'")
            },
        165:{
            "lapp":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "rarr":actionType.shift(163),
            "sleft":actionType.error("expected 'operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.shift(170),
            "rbracket":actionType.error("expected 'operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "times":actionType.shift(164),
            "eq":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'operator','parenthese', but given 'operator'"),
            "scolon":actionType.error("expected 'operator','parenthese', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'operator','parenthese', but given 'delimiter'"),
            "mid":actionType.error("expected 'operator','parenthese', but given 'delimiter'"),
            "uscore":actionType.error("expected 'operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'operator','parenthese', but given '$'")
            },
        166:{
            "lapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rapp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "rarr":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "sleft":actionType.error("expected 'colon','qmark', but given 'sleft'"),
            "sright":actionType.error("expected 'colon','qmark', but given 'sright'"),
            "lbracketm":actionType.error("expected 'colon','qmark', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'colon','qmark', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rpar":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'colon','qmark', but given 'parenthese'"),
            "plus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "minus":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "power":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "divide":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "modulo":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "times":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not-eq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "geq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "leq":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "gt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "lt":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "and":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "or":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "imp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "biimp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "not":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "bslash":actionType.error("expected 'colon','qmark', but given 'bslash'"),
            "up":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "amp":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "tilde":actionType.error("expected 'colon','qmark', but given 'operator'"),
            "scolon":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'colon','qmark', but given 'dcolon'"),
            "colon":actionType.reduce(11),
            "let":actionType.error("expected 'colon','qmark', but given 'let'"),
            "type":actionType.error("expected 'colon','qmark', but given 'type'"),
            "assign":actionType.error("expected 'colon','qmark', but given 'assign'"),
            "match":actionType.error("expected 'colon','qmark', but given 'match'"),
            "with":actionType.error("expected 'colon','qmark', but given 'with'"),
            "block":actionType.error("expected 'colon','qmark', but given 'block'"),
            "of":actionType.error("expected 'colon','qmark', but given 'of'"),
            "hex":actionType.error("expected 'colon','qmark', but given 'hex'"),
            "binary":actionType.error("expected 'colon','qmark', but given 'binary'"),
            "float":actionType.error("expected 'colon','qmark', but given 'float'"),
            "int":actionType.error("expected 'colon','qmark', but given 'int'"),
            "string":actionType.error("expected 'colon','qmark', but given 'string'"),
            "bool":actionType.error("expected 'colon','qmark', but given 'bool'"),
            "type-id":actionType.error("expected 'colon','qmark', but given 'type-id'"),
            "id":actionType.error("expected 'colon','qmark', but given 'id'"),
            "comma":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'colon','qmark', but given 'dotdot'"),
            "dot":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "mid":actionType.error("expected 'colon','qmark', but given 'delimiter'"),
            "uscore":actionType.error("expected 'colon','qmark', but given 'uscore'"),
            "qmark":actionType.reduce(11),
            "$":actionType.error("expected 'colon','qmark', but given '$'")
            },
        167:{
            "lapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter', but given 'operator'"),
            "rarr":actionType.error("expected 'delimiter', but given 'operator'"),
            "sleft":actionType.error("expected 'delimiter', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rpar":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'delimiter', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter', but given 'operator'"),
            "power":actionType.error("expected 'delimiter', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter', but given 'operator'"),
            "times":actionType.error("expected 'delimiter', but given 'operator'"),
            "eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter', but given 'operator'"),
            "and":actionType.error("expected 'delimiter', but given 'operator'"),
            "or":actionType.error("expected 'delimiter', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter', but given 'operator'"),
            "not":actionType.error("expected 'delimiter', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter', but given 'operator'"),
            "scolon":actionType.shift(173),
            "dcolon":actionType.error("expected 'delimiter', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter', but given 'colon'"),
            "let":actionType.error("expected 'delimiter', but given 'let'"),
            "type":actionType.error("expected 'delimiter', but given 'type'"),
            "assign":actionType.error("expected 'delimiter', but given 'assign'"),
            "match":actionType.error("expected 'delimiter', but given 'match'"),
            "with":actionType.error("expected 'delimiter', but given 'with'"),
            "block":actionType.error("expected 'delimiter', but given 'block'"),
            "of":actionType.error("expected 'delimiter', but given 'of'"),
            "hex":actionType.error("expected 'delimiter', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter', but given 'binary'"),
            "float":actionType.error("expected 'delimiter', but given 'float'"),
            "int":actionType.error("expected 'delimiter', but given 'int'"),
            "string":actionType.error("expected 'delimiter', but given 'string'"),
            "bool":actionType.error("expected 'delimiter', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter', but given 'id'"),
            "comma":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter', but given 'delimiter'"),
            "mid":actionType.shift(172),
            "uscore":actionType.error("expected 'delimiter', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter', but given '$'")
            },
        168:{
            "lapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rarr":actionType.shift(163),
            "sleft":actionType.error("expected 'delimiter','operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(85),
            "rbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "times":actionType.shift(164),
            "eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "scolon":actionType.reduce(85),
            "dcolon":actionType.error("expected 'delimiter','operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "mid":actionType.reduce(85),
            "uscore":actionType.error("expected 'delimiter','operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator','parenthese', but given '$'")
            },
        169:{
            "lapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rarr":actionType.reduce(86),
            "sleft":actionType.error("expected 'delimiter','operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(86),
            "rbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "times":actionType.reduce(86),
            "eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "scolon":actionType.reduce(86),
            "dcolon":actionType.error("expected 'delimiter','operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "mid":actionType.reduce(86),
            "uscore":actionType.error("expected 'delimiter','operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator','parenthese', but given '$'")
            },
        170:{
            "lapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rapp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "rarr":actionType.reduce(87),
            "sleft":actionType.error("expected 'delimiter','operator','parenthese', but given 'sleft'"),
            "sright":actionType.error("expected 'delimiter','operator','parenthese', but given 'sright'"),
            "lbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'lbracketm'"),
            "rbracketm":actionType.error("expected 'delimiter','operator','parenthese', but given 'rbracketm'"),
            "lpar":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "rpar":actionType.reduce(87),
            "rbracket":actionType.error("expected 'delimiter','operator','parenthese', but given 'parenthese'"),
            "plus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "minus":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "power":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "divide":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "modulo":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "times":actionType.reduce(87),
            "eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not-eq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "geq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "leq":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "gt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "lt":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "and":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "or":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "imp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "biimp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "not":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "bslash":actionType.error("expected 'delimiter','operator','parenthese', but given 'bslash'"),
            "up":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "amp":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "tilde":actionType.error("expected 'delimiter','operator','parenthese', but given 'operator'"),
            "scolon":actionType.reduce(87),
            "dcolon":actionType.error("expected 'delimiter','operator','parenthese', but given 'dcolon'"),
            "colon":actionType.error("expected 'delimiter','operator','parenthese', but given 'colon'"),
            "let":actionType.error("expected 'delimiter','operator','parenthese', but given 'let'"),
            "type":actionType.error("expected 'delimiter','operator','parenthese', but given 'type'"),
            "assign":actionType.error("expected 'delimiter','operator','parenthese', but given 'assign'"),
            "match":actionType.error("expected 'delimiter','operator','parenthese', but given 'match'"),
            "with":actionType.error("expected 'delimiter','operator','parenthese', but given 'with'"),
            "block":actionType.error("expected 'delimiter','operator','parenthese', but given 'block'"),
            "of":actionType.error("expected 'delimiter','operator','parenthese', but given 'of'"),
            "hex":actionType.error("expected 'delimiter','operator','parenthese', but given 'hex'"),
            "binary":actionType.error("expected 'delimiter','operator','parenthese', but given 'binary'"),
            "float":actionType.error("expected 'delimiter','operator','parenthese', but given 'float'"),
            "int":actionType.error("expected 'delimiter','operator','parenthese', but given 'int'"),
            "string":actionType.error("expected 'delimiter','operator','parenthese', but given 'string'"),
            "bool":actionType.error("expected 'delimiter','operator','parenthese', but given 'bool'"),
            "type-id":actionType.error("expected 'delimiter','operator','parenthese', but given 'type-id'"),
            "id":actionType.error("expected 'delimiter','operator','parenthese', but given 'id'"),
            "comma":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'delimiter','operator','parenthese', but given 'dotdot'"),
            "dot":actionType.error("expected 'delimiter','operator','parenthese', but given 'delimiter'"),
            "mid":actionType.reduce(87),
            "uscore":actionType.error("expected 'delimiter','operator','parenthese', but given 'uscore'"),
            "qmark":actionType.error("expected 'delimiter','operator','parenthese', but given 'qmark'"),
            "$":actionType.error("expected 'delimiter','operator','parenthese', but given '$'")
            },
        171:{
            "lapp":actionType.reduce(5),
            "rapp":actionType.reduce(5),
            "rarr":actionType.reduce(5),
            "sleft":actionType.reduce(5),
            "sright":actionType.reduce(5),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(5),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(5),
            "rbracket":actionType.reduce(5),
            "plus":actionType.reduce(5),
            "minus":actionType.reduce(5),
            "power":actionType.reduce(5),
            "divide":actionType.reduce(5),
            "modulo":actionType.reduce(5),
            "times":actionType.reduce(5),
            "eq":actionType.reduce(5),
            "not-eq":actionType.reduce(5),
            "geq":actionType.reduce(5),
            "leq":actionType.reduce(5),
            "gt":actionType.reduce(5),
            "lt":actionType.reduce(5),
            "and":actionType.reduce(5),
            "or":actionType.reduce(5),
            "imp":actionType.reduce(5),
            "biimp":actionType.reduce(5),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(5),
            "up":actionType.reduce(5),
            "amp":actionType.reduce(5),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(5),
            "dcolon":actionType.reduce(5),
            "colon":actionType.reduce(5),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(5),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(5),
            "dotdot":actionType.reduce(5),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(5),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(5)
            },
        172:{
            "lapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "rapp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "rarr":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "sleft":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'sleft'"),
            "sright":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'sright'"),
            "lbracketm":actionType.shift(18),
            "rbracketm":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'rbracketm'"),
            "lpar":actionType.shift(20),
            "lbracket":actionType.shift(17),
            "rpar":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'parenthese'"),
            "rbracket":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'parenthese'"),
            "plus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "minus":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "power":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "divide":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "modulo":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "times":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "not-eq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "geq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "leq":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "gt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "lt":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "and":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "or":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "imp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "biimp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "not":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "bslash":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'bslash'"),
            "up":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "amp":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "tilde":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'operator'"),
            "scolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dcolon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'dcolon'"),
            "colon":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'colon'"),
            "let":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'let'"),
            "type":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'type'"),
            "assign":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'assign'"),
            "match":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'match'"),
            "with":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'with'"),
            "block":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'block'"),
            "of":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'of'"),
            "hex":actionType.shift(14),
            "binary":actionType.shift(10),
            "float":actionType.shift(13),
            "int":actionType.shift(16),
            "string":actionType.shift(24),
            "bool":actionType.shift(12),
            "type-id":actionType.shift(27),
            "id":actionType.shift(15),
            "comma":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "dotdot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'dotdot'"),
            "dot":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "mid":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'delimiter'"),
            "uscore":actionType.shift(28),
            "qmark":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given 'qmark'"),
            "$":actionType.error("expected 'binary','bool','float','hex','id','int','parenthese','lbracketm','string','type-id','uscore', but given '$'")
            },
        173:{
            "lapp":actionType.reduce(6),
            "rapp":actionType.reduce(6),
            "rarr":actionType.reduce(6),
            "sleft":actionType.reduce(6),
            "sright":actionType.reduce(6),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(6),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(6),
            "rbracket":actionType.reduce(6),
            "plus":actionType.reduce(6),
            "minus":actionType.reduce(6),
            "power":actionType.reduce(6),
            "divide":actionType.reduce(6),
            "modulo":actionType.reduce(6),
            "times":actionType.reduce(6),
            "eq":actionType.reduce(6),
            "not-eq":actionType.reduce(6),
            "geq":actionType.reduce(6),
            "leq":actionType.reduce(6),
            "gt":actionType.reduce(6),
            "lt":actionType.reduce(6),
            "and":actionType.reduce(6),
            "or":actionType.reduce(6),
            "imp":actionType.reduce(6),
            "biimp":actionType.reduce(6),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(6),
            "up":actionType.reduce(6),
            "amp":actionType.reduce(6),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(6),
            "dcolon":actionType.reduce(6),
            "colon":actionType.reduce(6),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(6),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(6),
            "dotdot":actionType.reduce(6),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(6),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(6)
            },
        174:{
            "lapp":actionType.reduce(7),
            "rapp":actionType.reduce(7),
            "rarr":actionType.reduce(7),
            "sleft":actionType.reduce(7),
            "sright":actionType.reduce(7),
            "lbracketm":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'lbracketm'"),
            "rbracketm":actionType.reduce(7),
            "lpar":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "lbracket":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'parenthese'"),
            "rpar":actionType.reduce(7),
            "rbracket":actionType.reduce(7),
            "plus":actionType.reduce(7),
            "minus":actionType.reduce(7),
            "power":actionType.reduce(7),
            "divide":actionType.reduce(7),
            "modulo":actionType.reduce(7),
            "times":actionType.reduce(7),
            "eq":actionType.reduce(7),
            "not-eq":actionType.reduce(7),
            "geq":actionType.reduce(7),
            "leq":actionType.reduce(7),
            "gt":actionType.reduce(7),
            "lt":actionType.reduce(7),
            "and":actionType.reduce(7),
            "or":actionType.reduce(7),
            "imp":actionType.reduce(7),
            "biimp":actionType.reduce(7),
            "not":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "bslash":actionType.reduce(7),
            "up":actionType.reduce(7),
            "amp":actionType.reduce(7),
            "tilde":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'operator'"),
            "scolon":actionType.reduce(7),
            "dcolon":actionType.reduce(7),
            "colon":actionType.reduce(7),
            "let":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'let'"),
            "type":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type'"),
            "assign":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'assign'"),
            "match":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'match'"),
            "with":actionType.reduce(7),
            "block":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'block'"),
            "of":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'of'"),
            "hex":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'hex'"),
            "binary":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'binary'"),
            "float":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'float'"),
            "int":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'int'"),
            "string":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'string'"),
            "bool":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'bool'"),
            "type-id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'type-id'"),
            "id":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'id'"),
            "comma":actionType.reduce(7),
            "dotdot":actionType.reduce(7),
            "dot":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'delimiter'"),
            "mid":actionType.reduce(7),
            "uscore":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'uscore'"),
            "qmark":actionType.error("expected 'operator','bslash','colon','delimiter','dcolon','dotdot','parenthese','rbracketm','sleft','sright','with','eoi', but given 'qmark'"),
            "$":actionType.reduce(7)
            }
        };
    var gotoTable = {
        0:{
            "Stmt":actionType.some(8),
            "Bind":actionType.some(5),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(6),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        1:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        2:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        3:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        4:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.some(29),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        5:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        6:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        7:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        8:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        9:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        10:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        11:{
            "Stmt":actionType.some(60),
            "Bind":actionType.some(5),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(6),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        12:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        13:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        14:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        15:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        16:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        17:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(61),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.some(62),
            "SMaker'":actionType.none()
            },
        18:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(61),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.some(63),
            "SMaker'":actionType.none()
            },
        19:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.some(65),
            "IdTuple'":actionType.none(),
            "Id":actionType.some(64),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        20:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(70),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.some(69),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        21:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(71),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        22:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(72),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        23:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(73),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        24:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        25:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(74),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        26:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        27:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.some(76),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        28:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        29:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        30:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.some(78),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        31:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(79),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        32:{
            "Stmt":actionType.some(80),
            "Bind":actionType.some(5),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(6),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        33:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(81),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        34:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(82),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        35:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(83),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        36:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(84),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        37:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(85),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        38:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(86),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        39:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(87),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        40:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(88),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        41:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(89),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        42:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(90),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        43:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(91),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        44:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(92),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        45:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(93),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        46:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(94),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        47:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(95),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        48:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(96),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        49:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(97),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        50:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(98),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        51:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(99),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        52:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(100),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        53:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(101),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        54:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(102),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        55:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(103),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        56:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(104),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        57:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(105),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        58:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(106),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        59:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(107),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        60:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        61:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.some(109)
            },
        62:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        63:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        64:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.some(113),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        65:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        66:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        67:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.some(116),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        68:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        69:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        70:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.some(118),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        71:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        72:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        73:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        74:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        75:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        76:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        77:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.some(122),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        78:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.some(125),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        79:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        80:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        81:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        82:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        83:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        84:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        85:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        86:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        87:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        88:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        89:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        90:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        91:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        92:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        93:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        94:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        95:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        96:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        97:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        98:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        99:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        100:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        101:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        102:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        103:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        104:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        105:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        106:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        107:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        108:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        109:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        110:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(127),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        111:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        112:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        113:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        114:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.some(128),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        115:{
            "Stmt":actionType.some(129),
            "Bind":actionType.some(5),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(6),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        116:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.some(130),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        117:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        118:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        119:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(131),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        120:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        121:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.some(133),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        122:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        123:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.some(135),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        124:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.some(136),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        125:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        126:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        127:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.some(137)
            },
        128:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.some(138),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        129:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        130:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        131:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.some(140),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        132:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.some(143),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.some(142),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.some(141),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(144),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        133:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        134:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.some(145),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        135:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        136:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        137:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        138:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        139:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        140:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        141:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.some(147),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        142:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.some(149),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        143:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        144:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.some(151),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        145:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.some(152),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        146:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(154),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.some(155),
            "TypeCnstr3":actionType.some(156),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        147:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        148:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.some(158),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        149:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        150:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(160),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        151:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.some(161),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        152:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        153:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.some(162),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        154:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        155:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        156:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        157:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(154),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.some(165),
            "TypeCnstr3":actionType.some(156),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        158:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.some(166),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        159:{
            "Stmt":actionType.some(167),
            "Bind":actionType.some(5),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.some(6),
            "Atom":actionType.some(2),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(9),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        160:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        161:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        162:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        163:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(154),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.some(168),
            "TypeCnstr3":actionType.some(156),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        164:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(154),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.some(169),
            "TypeCnstr3":actionType.some(156),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        165:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        166:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        167:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.some(171),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        168:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        169:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        170:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        171:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        172:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.some(174),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.some(142),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.some(141),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.some(3),
            "Atom''":actionType.some(4),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.some(144),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.some(7),
            "Arr":actionType.some(1),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        173:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            },
        174:{
            "Stmt":actionType.none(),
            "Bind":actionType.none(),
            "Matcher":actionType.none(),
            "Matcher'":actionType.none(),
            "MatchLeft":actionType.none(),
            "MatchLeft'":actionType.none(),
            "MatchWhen":actionType.none(),
            "Exp":actionType.none(),
            "Atom":actionType.none(),
            "AtomTuple":actionType.none(),
            "AtomTuple'":actionType.none(),
            "Atom'":actionType.none(),
            "Atom''":actionType.none(),
            "AtomIndexer":actionType.none(),
            "IdTuple":actionType.none(),
            "IdTuple'":actionType.none(),
            "Id":actionType.none(),
            "Type":actionType.none(),
            "Type'":actionType.none(),
            "Type''":actionType.none(),
            "TypeCnstr":actionType.none(),
            "TypeCnstr0":actionType.none(),
            "TypeCnstr1":actionType.none(),
            "TypeCnstr2":actionType.none(),
            "TypeCnstr3":actionType.none(),
            "List":actionType.none(),
            "Arr":actionType.none(),
            "SMaker":actionType.none(),
            "SMaker'":actionType.none()
            }
        };
    var parser = function(tokens){
        var sStack = new Stack();
        var tree = new Stack();
        var i = 0;
        var parsing = true;
        if(tokens["__success"] !== undefined && !tokens["__success"]){
            tree.push({error:true,msg:errors.garbage(tokens["__res"])});
            return tree;
            }
        sStack.push(0);
        tree.push({type:"scope",v:"prg",lines:[]});
        while(parsing){
            var s = sStack.peek();
            var a = tokens[i].tt;
            var entry = actionTable[s][a];
            switch(entry.type){
                case "shift":
                    sStack.push(entry.v);
                    tree = addToken2tree(tree,tokens[i]);
                    i += 1;
                    break;
                case "reduce":
                    var r = entry.v;
                    var prod = productions_str[r];
                    var rSide = prod.rside;
                    var pName = prod.prod;
                    var pFun = productions_fun[r];
                    sStack.popN(rSide.length,function(x){});
                    sStack.push(gotoTable[sStack.peek()][pName].v);
                    tree = pFun(tree);
                    break;
                case "accept":
                    return tree;
                case "error":
                    alert("error");
                    var token = tokens[i];
                    tree.push({error:true,msg:errors.syntax({x:token.posX,y:token.posY},entry.v)});
                    return tree;
                }
            }
        };
